/**
 * Especificacion JavaCC para la Practica 2 (Procesadores de Lenguajes)
 * Pablo Garcia Garcia - 781020@unizar.es
 * Aaron Ibanez Espes - 779088@unizar.es
 * Ultima modificacion: 29/03/2021
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(MiniLeng) 
package analizador;
import java.io.IOException;
import java.lang.*;
import tabla_simbolos.TablaSimbolos;
import tabla_simbolos.Simbolo;
import tabla_simbolos.SimboloYaDeclaradoException;
import tabla_simbolos.SimboloNoEncontradoException;

class Valor
{
  Integer valorEnt;
  Boolean valorBool;
  Character valorChar;
  String code;
  Simbolo.Clase_parametro claseParametro;
  Simbolo.Tipo_variable tipoVariable;
}

public class MiniLeng
{
  private static int DIR_INICIAL = 3;

  private static int nivel;

  private static int dir = 3;
  
  private static boolean error = false;

  private static TablaSimbolos tablaSimbolos;

  private static void panicMode()
  {
	Token t;
	do {
	t = getNextToken();
	} while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
  }

  private static void errorSintactico(ParseException e)
  {
    error = true;
    System.out.print("ERROR SINTACTICO(" + e.currentToken.next.beginLine + ", " + e.currentToken.next.beginColumn + "): ");
    System.out.print("Se encontro \"" + e.currentToken.next.image + "\" ");
    String expectedMSG = "";
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < e.expectedTokenSequences.length; i++)
    {
      if (maxSize < e.expectedTokenSequences [i].length)
      {
        maxSize = e.expectedTokenSequences [i].length;
      }
      for (int j = 0; j < e.expectedTokenSequences [i].length; j++)
      {
        expected.append(tokenImage [e.expectedTokenSequences [i] [j]]);
      }
      if (e.expectedTokenSequences [i] [e.expectedTokenSequences [i].length - 1] != 0)
      {
        expected.append(" o ");
      }
    }
    expected = expected.deleteCharAt(expected.length() - 1);
    expected = expected.deleteCharAt(expected.length() - 1);
    expectedMSG += "y se esperaba:" + expected.toString();
    System.out.println(expectedMSG);
    panicMode();
  }

  private static void error_semantico(int linea, int columna, String e)
  {
    error = true;
    System.out.println("ERROR SEMANTICO(" + linea + ", " + columna + "): " + e);
  }

  private static void warning(int linea, int columna, String e)
  {
    System.out.println("WARNING(" + linea + ", " + columna + "): " + e);
  }
  
  public static void main(String args []) throws ParseException
  {
    try {
      	if(args.length > 0) {
			MiniLeng parser = new MiniLeng(new java.io.FileInputStream(new java.io.File(args [0])));
	  	}else {
		    MiniLeng parser = new MiniLeng(System.in);
		    System.out.println("Leyendo de la entrada estandar...");
		}
		tablaSimbolos = new TablaSimbolos(); 
    	MiniLeng.programa();
    	if(!error) {
			System.out.println("Analizado correctamente!");
   		}
    }
    catch (TokenMgrError e) {
		//Error lexico
		try {
			System.out.println("ERROR LEXICO(" + SimpleCharStream.getBeginLine() + "," +
			SimpleCharStream.getBeginColumn() + ")" + " simbolo no reconocido: " + SimpleCharStream.readChar());
		}
		catch(Exception err) { }
	}
  	catch (Error e) { 
        System.out.println("Se ha producido un error inesperado");
        System.out.println(e);
	}
	catch (IOException e) {
        System.out.println("Fichero no encontrado, formato de ejecucion \"MiniLeng [nombrefichero].ml\"");
   	}
  }
}

PARSER_END(MiniLeng)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"%" (~["\n"])* ("\n")>
| <"%%" (~["%"])* "%%"> 
}

TOKEN : /* PALABRAS RESERVADAS */
{
	<tPROGRAMA : "programa">
	{
	  //System.out.println("programa");
	}
|	<tVAR : "var">
	{
	  //System.out.println("var");
	}
|	<tPRINCIPIO : "principio">
	{
	  //System.out.println("principio");
	}
|	<tFIN : "fin">
	{
	  //System.out.println("fin");
	}
|	<tSI : "si">
	{
	  //System.out.println("si");
	}
|	<tENT : "ent">
	{
	  //System.out.println("ent");
	}
|	<tSI_NO : "si_no">
	{
	  //System.out.println("si_no");
	}
|	<tFSI : "fsi">
	{
	  //System.out.println("fsi");
	}
|	<tMQ : "mq"> 
	{
	  //System.out.println("mq");
	}
|	<tFMQ : "fmq">
	{
	  //System.out.println("fmq");
	}
|	<tVAL : "val">
	{
	  //System.out.println("val");
	}
|	<tREF : "ref">
	{
	  //System.out.println("ref");
	}
|	<tACCION : "accion">
	{
	  //System.out.println("accion");
	}
  
}

TOKEN: /* OPERADORES DE FLUJO */
{
	<tFIN_SENTENCIA : ";" >
 	{
    	//System.out.println("FIN_SENTENCIA");
 	}
| 	<tSEPARADOR : "," >
 	{
    	//System.out.println("SEPARADOR");
 	}
}

TOKEN : /* OPERADORES ARITMETICOS */
{
	<tSUMA : "+" >
 	{
    	//System.out.println("SUMA");
 	}
| 	<tRESTA : "-" >
 	{
    	//System.out.println("RESTA");
 	}
 | 	<tDIV : "/" | "DIV" >
 	{
    	//System.out.println("DIVISION");
 	}
 | 	<tMULT : "*" >
 	{
    	//System.out.println("MULT");
 	}
}

TOKEN : /* TIPOS DE DATOS */
{
	<tENTERO : "entero">
	{
	  //System.out.println("entero");
	}
|	<tBOOLEANO : "booleano">
	{
	  //System.out.println("booleano");
	}
|	<tCARACTER : "caracter">
	{
	  //System.out.println("caracter");
	}
}

TOKEN : /* OPERADORES BOOLEANOS */
{
	<tAND : "and">
	{
	  //System.out.println("and");
	}
|	<tOR : "or">
	{
	  //System.out.println("or");
	}
|	<tNOT : "not">
	{
	  //System.out.println("not");
	}
|	<tMAYOR : ">">
	{
	  //System.out.println(" >");
	}
|	<tMENOR : "<">
	{
	  //System.out.println("<");
	}
|	<tIGUAL : "=">
	{
	  //System.out.println("=");
	}
|	<tMAI : ">=">
	{
	  //System.out.println(">=");
	}
|	<tMEI : "<=">
	{
	  //System.out.println("<=");
	}
|	<tNI : "<>">
	{
	  //System.out.println("<>");
	}
|	<tOPAS : ":=">
	{
	  //System.out.println(":=");
	}
|	<tMOD : "mod">
	{
	  //System.out.println("mod");
	}
}

TOKEN: /* OPERADORES ENTRADA/SALIDA */
{
	<tESCRIBIR : "escribir">
	{
	  //System.out.println("escribir");
	}
|	<tLEER : "leer">
	{
	  //System.out.println("leer");
	}
}

TOKEN : /* OPERADORES CARACTERES */
{
	<tENTACAR : "entacar">
	{
	  //System.out.println("entacar");
	}
|	<tCARAENT : "caraent">
	{
	  //System.out.println("caraent");
	}
}

TOKEN : /* VALORES */
{
  	<#DIGITO : ["0"-"9"]>
| 	<#LETRA : ["a"-"z"]>
| 	<#SIGNO : [":", ",","?","=","[","]","{","}","(",")","<",">", "'","\"","=",",",".",",",";"," ", "/"] >
        
| 	< tVALOR_ENTERO : (< DIGITO >)+ >
  	{
    	//System.out.println("VALOR_ENTERO (Valor: " + matchedToken + ")"); 
  	}
|	<tTRUE : "true">
	{
	  	//System.out.println("true");
	}
|	<tFALSE : "false">
	{
	  	//System.out.println("FALSE");
	} 
| 	<tIDENTIFICADOR : ((< LETRA > | ("_")+(< DIGITO > | < LETRA >))(< DIGITO >)*)+ >
  	{
    	//System.out.println("IDENTIFICADOR (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCHAR : "\"" < LETRA > "\"" >
  	{
    	//System.out.println("CARACTER (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCAD : "\"" (~["\""])*  "\"" >
  	{
    	//System.out.println("CADENA (Valor: " + matchedToken + ")");
  	}
}


TOKEN : /* AGRUPACIONES */ 
{
  <tPAR_IZQ : "(">
  {
    //System.out.println("PAR_IZQ");
  }
| <tPAR_DER : ")">
  {
    //System.out.println("PAR_DCHA");
  }
} 

// ANALIZADOR SINTACTICO

/*
	<tPROGRAMA>	<tIDENTIFICADOR> ";" declaracion_variables() declaracion_acciones() bloque_sentencias() <EOF>
*/
int programa() :
{
	nivel = 0;
	tablaSimbolos.inicializar_tabla();
	Token t = null;
	//ListaInstr l = new ListaInstr();
	//ListaInstr lAcciones = null;
	//ListaInstr lSentencias = null;
	Integer etiq;
}
{
	try {
		<tPROGRAMA>	t = <tIDENTIFICADOR>
		{
			tablaSimbolos.introducir_programa(t.image,dir);
		}
		";"
		declaracion_variables()
		/*lAcciones = */declaracion_acciones()
		/*lSentencias = */bloque_sentencias() < EOF >
	}
	catch (ParseException e) {
		errorSintactico(e);//(e, "La declaracion del programa es incorrecta");
	}
{
	System.out.println("ANTES de cerrar programa");
	tablaSimbolos.imprimirTabla();
	// Cerrar el programa y limpiar la tabla de simbolos
	tablaSimbolos.eliminar_variables(nivel);
	tablaSimbolos.eliminar_acciones(nivel);
	tablaSimbolos.eliminar_parametros(nivel+1);
	tablaSimbolos.eliminar_programa();

	//Si debug
	System.out.println("Despues de cerrar programa");
	tablaSimbolos.imprimirTabla();
}
{
	// Fin del compilador
	return 0;
}
}

/*
	(declaracion() ";")*
*/
void declaracion_variables():
{
}
{
	try {
	  	(declaracion() ";")*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	tipo_variables() identificadores()
*/
void declaracion():
{
  	Simbolo.Tipo_variable tTipo = null;
}
{
  	try {
	  	tTipo = tipo_variables() identificadores(tTipo)
	}
	catch (ParseException e)
	{
		errorSintactico(e); 
	}
}

/*
	<tENTERO>|<tCARACTER>|<tBOOLEANO>
*/
Simbolo.Tipo_variable tipo_variables():
{
  Simbolo.Tipo_variable t = Simbolo.Tipo_variable.DESCONOCIDO;
}
{
 	try {
	  		<tENTERO>   { t = Simbolo.Tipo_variable.ENTERO; } 
	  	|   <tCARACTER> { t = Simbolo.Tipo_variable.CHAR; }
	  	| 	<tBOOLEANO> { t = Simbolo.Tipo_variable.BOOLEANO; }
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
	  return t;
	} 
}

/*
	<tIDENTIFICADOR> ( "," <tIDENTIFICADOR> )*
*/
void identificadores(Simbolo.Tipo_variable tipo): 
{
  	Token t = null;
}
{
  	try {
	  	t = <tIDENTIFICADOR> 
		{
		  	try { 
				tablaSimbolos.introducir_variable(t.image,tipo,nivel,dir);
				dir++;
			}
			catch (SimboloYaDeclaradoException e)
			{
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
		}
	  	( "," t = <tIDENTIFICADOR>
	  	{
			try { 
				tablaSimbolos.introducir_variable(t.image,tipo,nivel,dir);
				dir++;
			}
			catch (SimboloYaDeclaradoException e)
			{
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
	  	}
	  	)*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	(declaracion_accion())*
*/
void declaracion_acciones():
{
}
{
  	try {
	  	(declaracion_accion())*
	}
	catch (ParseException e)
	{ 
		errorSintactico(e);
	}
}

/*
	cabecera_accion() ";" declaracion_variables() declaracion_acciones() bloque_sentencias()
*/
void declaracion_accion():
{
}
{
  	try {
	  	cabecera_accion() declaracion_variables() declaracion_acciones() bloque_sentencias()
	  	{
				tablaSimbolos.eliminar_variables(nivel);
				tablaSimbolos.eliminar_acciones(nivel);
				tablaSimbolos.eliminar_parametros(nivel+1);
				nivel--;
		}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	<tACCION> <tIDENTIFICADOR> (parametros_formales())?
*/
void cabecera_accion():
{
  	Token t = null;
}
{
  	try {
	  	<tACCION> t = <tIDENTIFICADOR>
		{
			Simbolo accion = tablaSimbolos.introducir_accion(t.image,nivel,dir); 
			nivel++;
			dir = DIR_INICIAL;
		}
	  	(parametros_formales(accion))? ";"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	catch (SimboloYaDeclaradoException e)
	{
	  error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
	}
}

/*
	"(" (parametros() (";" parametros())*)? ")"
*/
void parametros_formales(Simbolo accion):
{
}
{
  	try {
	  	"(" (parametros(accion) (";" parametros(accion))*)? ")"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}	 
}

/*
	<tIDENTIFICADOR> ("," <tIDENTIFICADOR>)*
*/
void lista_parametros(Simbolo.Clase_parametro tClase, Simbolo.Tipo_variable tTipo, Simbolo accion):
{
	Token t = null;
}
{
  	try {
	  	 t = <tIDENTIFICADOR>
	  	{
	  	  	try {
	  			Simbolo param = tablaSimbolos.introducir_parametro(t.image,tTipo,tClase,nivel,dir);
	  			accion.addParametro(param);
			}
			catch (SimboloYaDeclaradoException e) {
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
	  		dir++;
	  		//tablaSimbolos.introducir_variable(t.image,tTipo,nivel,dir);
  	  	}
  	  	("," t = <tIDENTIFICADOR>
  	  	{
  	  	  	try {
				Simbolo param1 = tablaSimbolos.introducir_parametro(t.image,tTipo,tClase,nivel,dir);
				accion.addParametro(param1);
			}
			catch (SimboloYaDeclaradoException e) {
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
			dir++;
  	  	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	clase_parametros() tipo_variables() lista_parametros()
*/
void parametros(Simbolo accion):
{
	Simbolo.Clase_parametro tClase;
	Simbolo.Tipo_variable tTipo = Simbolo.Tipo_variable.DESCONOCIDO;
}
{
  	try {
	  	tClase = clase_parametros() tTipo = tipo_variables() lista_parametros(tClase,tTipo,accion)
	}
	catch (ParseException e) 
	{
		errorSintactico(e);
	}
}

/*
	<tVAL>|<tREF>
*/
Simbolo.Clase_parametro clase_parametros():
{
	Simbolo.Clase_parametro t = null; 
}
{
  	try {
	  		<tVAL> { t = Simbolo.Clase_parametro.VAL; }
	  	| 	<tREF> { t = Simbolo.Clase_parametro.REF; }
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return t;
	}
}

/*
	<tPRINCIPIO> lista_sentencias() <tFIN>
*/
void bloque_sentencias():
{
}
{
	try {
	  	<tPRINCIPIO> lista_sentencias() <tFIN>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}  
}

/*
	(sentencia())+
*/
void lista_sentencias():
{
}
{
  	try {
	  	(sentencia())+
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	leer() ";"
	| 	escribir() ";"
	| 	<tIDENTIFICADOR> (asignacion() | invocacion_accion())
	| 	seleccion()
	| 	mientras_que()
*/
void sentencia():
{
  	Token t = null;
}
{
  	try {
	  		leer() ";"
		| 	escribir() ";"
		| 	t=<tIDENTIFICADOR> (asignacion(t) | invocacion_accion(t))
		| 	seleccion()
		| 	mientras_que()
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	<tLEER> "(" lista_asignables() ")"
*/
void leer():
{
}
{
  	try {
	  	<tLEER> "(" lista_asignables() ")"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	<tIDENTIFICADOR> ("," <tIDENTIFICADOR>)*
*/
void lista_asignables(): // Esta funcion antes llamaba a lista_parametros POR SI ERROR
{
  	Token t = null;
  	Simbolo S = null;
}
{
  	try {
  	  	t=<tIDENTIFICADOR>
  	  	{
  	  	  	try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				if(S.getTipo() == Simbolo.Tipo_simbolo.PROGRAMA || S.getTipo() == Simbolo.Tipo_simbolo.ACCION) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion no valida para simbolo de tipo "+S.getTipo());	
				}else if(S.getVariable() == Simbolo.Tipo_variable.BOOLEANO) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion no valida para el tipo "+S.getVariable());	
				}
			}
			catch (SimboloNoEncontradoException e) { 
				try{  
				  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir);
				}
				catch(SimboloYaDeclaradoException e1) {
				  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
				}
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
			}
		}
  	  	("," t=<tIDENTIFICADOR>
  	  	{
			try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				if(S.getTipo() == Simbolo.Tipo_simbolo.PROGRAMA || S.getTipo() == Simbolo.Tipo_simbolo.ACCION) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion no valida para simbolo de tipo "+S.getTipo());	
				}else if(S.getVariable() == Simbolo.Tipo_variable.BOOLEANO) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion no valida para el tipo "+S.getVariable());	
				}
			}
			catch (SimboloNoEncontradoException e) { 
				try{
				  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir);
				}
				catch(SimboloYaDeclaradoException e1) {
				  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
				}
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
			}
  	 	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	<tESCRIBIR> "(" lista_escribibles() ")"
*/
void escribir():
{
}
{
  	try {
	  	<tESCRIBIR> "(" lista_escribibles() ")" 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	factor() (","(factor()))*
*/
void lista_escribibles():
{
  	Valor v = null;
  	Simbolo S = null;
}
{
  	try {
	  	v = factor()
	  	{
			if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
			  	// Revisar token... (SI NO SABES A QUE SE REFIERE PREGUNTA A PABLO)
				error_semantico(token.beginLine, token.beginColumn, "Operacion no valida para el tipo "+v.tipoVariable);
			}
	 	}
	  	(","(v = factor())
		{
			if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
			  	// Revisar token... (SI NO SABES A QUE SE REFIERE PREGUNTA A PABLO)
				error_semantico(token.beginLine, token.beginColumn, "Operacion no valida para el tipo "+v.tipoVariable);
			}
  		}
	  	)*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	<tOPAS> expresion() ";"
*/
Valor asignacion(Token t):
{
  Valor v = null;
}
{
  	try {
	  	<tOPAS>  v = expresion() ";"
	  	{
			return v;
	 	}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	(argumentos())? ";"
*/
void invocacion_accion(Token t):
{
}
{
  	try {
	  	(argumentos())? ";"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	} 
}

/*
	<tMQ> expresion() lista_sentencias() <tFMQ>
*/
void mientras_que():
{
}
{
  	try {
	  	<tMQ> expresion() lista_sentencias() <tFMQ>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	< tSI > expresion() < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())? < tFSI >
*/
void seleccion():
{
}
{
  	try {
	  	< tSI > expresion() < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())? < tFSI > 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	"(" lista_expresiones() ")"
*/
void argumentos():
{
}
{
  	try {
	  	"(" lista_expresiones() ")"
	  	
	}
	catch (ParseException e) 
	{
		errorSintactico(e);
	}
}

/*
	expresion() ("," expresion())*
*/
void lista_expresiones():
{
}
{
  	try {
	  	expresion() ("," expresion())*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
}

/*
	expresion_simple() (operador_relacional() expresion_simple())*
*/
Valor expresion():
{
  	Valor v = null;
  	Valor vAux = null;
  	Valor vRes = new Valor();
  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
  	Token operador = null;
}
{
  	try {
	  	v = expresion_simple() (operador = operador_relacional() vAux = expresion_simple())*
	} 
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tMAYOR>|<tMENOR>|<tIGUAL>|<tMAI>|<tMEI>|<tNI>
*/
Token operador_relacional():
{
	Token t = null;
}
{
  	try {
	  		<tMAYOR>
		|	<tMENOR>
		|	<tIGUAL> 
		|	<tMAI>
		|	<tMEI>
		|	<tNI>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	}
}

/*
	termino() (operador_aditivo() termino())*
*/
Valor expresion_simple():
{
	Valor v = null;
	Valor vAux = null;
	Valor vRes = new Valor();
	Token operador = null;
}
{
  	try {
	  	v = termino() (operador = operador_aditivo() vAux = termino()
	  	{
			if((vAux.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO || v.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO) && v.tipoVariable != vAux.tipoVariable) {
				vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
				error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible entre " + v.tipoVariable + " y " + vAux.tipoVariable);
		 	}else if(vAux.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
		 	   	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
		 	}else if(operador.kind == tSUMA || operador.kind == tRESTA) {
				if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO && vAux.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
					vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
					if(v.valorEnt != null && vAux.valorEnt != null) {
					  	long res;
					  	if(operador.kind == tSUMA) {
							res = v.valorEnt + vAux.valorEnt;
					 	}else {
							res = v.valorEnt - vAux.valorEnt;
					 	}
					 	if(res > 32767 || res < -32766) { 
							error_semantico(operador.beginLine, operador.beginColumn, "Desbordamiento en la operacion " + v.valorEnt + operador.image + vAux.valorEnt);
						}else {
							vRes.valorEnt = (int) res;
						}
					}
				}else {
					vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' no aplicable para " + v.tipoVariable);  	
				}
			}else if(operador.kind == tOR) {
				if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && vAux.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
					vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
					if(v.valorBool != null && vAux.valorBool != null) {
						vRes.valorBool = v.valorBool || vAux.valorBool;
					}
				}else {
				  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
	 	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tOR>|<tSUMA>|<tRESTA>
*/
Token operador_aditivo():
{
  Token t = null;
}
{
  	try {
	  	  	t = <tOR>
		| 	t = <tSUMA>
		| 	t = <tRESTA>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	} 	
}

/*
	factor() (operador_multiplicativo() factor())* 
*/
Valor termino():
{
	Valor v = null;
	Valor vAux = null;
	Valor vRes = new Valor();
	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
	Token operador = null;
}
{
  	try {
	  	v = factor()
	  	(operador=operador_multiplicativo() vAux = factor()
	  	{
		  	if(vAux.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && v.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && v.tipoVariable != vAux.tipoVariable) {
				vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
				error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible entre " + v.tipoVariable + " y " + vAux.tipoVariable);
		 	}else if(vAux.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
		 	   	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
		 	}else if(operador.kind == tMULT || operador.kind == tDIV || operador.kind == tMOD) {
				if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO && vAux.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
					vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
					if((operador.kind == tDIV || operador.kind == tMOD) && vAux.valorEnt != null && vAux.valorEnt == 0) {
						error_semantico(operador.beginLine, operador.beginColumn, "Division por 0");
					}else if(operador.kind == tMULT && (vAux.valorEnt != null && vAux.valorEnt == 0 || v.valorEnt != null && v.valorEnt == 0)) {
					 	vRes.valorEnt = 0;
					}else if(v.valorEnt != null && vAux.valorEnt != null) {
					  	long res;
					  	if(operador.kind == tMULT) {
							res = v.valorEnt * vAux.valorEnt;
					 	}else if(operador.kind == tDIV) {
							res = v.valorEnt / vAux.valorEnt;
					 	}else{
							res = v.valorEnt % vAux.valorEnt;
					 	}
					 	if(res > 32767 || res < -32766) { 
							error_semantico(operador.beginLine, operador.beginColumn, "Desbordamiento en la operacion " + v.valorEnt + operador.image + vAux.valorEnt);
						}else {
							vRes.valorEnt = (int) res;
						}
					}
				}else {
					vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' no aplicable para " + v.tipoVariable);  	
				}
			}else if(operador.kind == tAND) {
				if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && vAux.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
					vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
					if(v.valorBool != null && vAux.valorBool != null) {
						vRes.valorBool = v.valorBool && vAux.valorBool;
					}
				}else {
				  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
	 	})* 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tMULT>|<tDIV>|<tMOD>|<tAND>
*/
Token operador_multiplicativo():
{
  Token t = null;
}
{
  	try {
	  		t = <tMULT>
		| 	t = <tDIV>
		| 	t = <tMOD>
		| 	t = <tAND>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	}
}

/*
	<tNOT> factor()
	|"-" factor()
	|"(" expresion() ")"
	|<tENTACAR> "(" expresion() ")"
	|<tCARAENT> "(" expresion() ")"
	|<tIDENTIFICADOR>
	|<tVALOR_ENTERO>
	|<tCONSTCHAR>
	|<tCONSTCAD>
	|<tTRUE>
	|<tFALSE>
*/
Valor factor():
{
	Valor v = null;
	Valor vRes = new Valor();
	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
	Token t = null;
}
{
  	try {
	  	 	t = <tNOT> v = factor()
	  	 	{
	  	 	  	vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				if (v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && v.valorBool != null) {
						vRes.valorBool = !v.valorBool; 
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				} 
	  		}
	 	| 	t="-" v = factor()
	 		{
	 		  	vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.valorEnt != null) {
						vRes.valorEnt = -v.valorEnt;
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				} 
	 		}
		| 	"(" vRes = expresion() ")"
		| 	t=<tENTACAR> "(" v = expresion() ")"
			{
			  	vRes.tipoVariable = Simbolo.Tipo_variable.CHAR;
				if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.valorEnt != null) {
						if(v.valorEnt <= 255 && v.valorEnt > 0) {
						  	int valEnt = v.valorEnt;
							vRes.valorChar = (char)valEnt;
						}
						else {
							error_semantico(t.beginLine, t.beginColumn, "Desbordamiento con el operador \'" + t.image + "\' no aplicable para " + v.valorEnt);
						}
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
		| 	<tCARAENT> "(" v = expresion() ")"
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				if(v.tipoVariable == Simbolo.Tipo_variable.CHAR || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.CHAR && v.valorChar != null) {
						vRes.valorEnt = (int)v.valorChar;
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
		| 	t = <tIDENTIFICADOR> 
			{
			  	Simbolo S = tablaSimbolos.buscar_simbolo(t.image);
			  	if(S.getTipo() != Simbolo.Tipo_simbolo.PARAMETRO && S.getTipo() != Simbolo.Tipo_simbolo.VARIABLE) {
					error_semantico(t.beginLine, t.beginColumn, t.image + " es un simbolo de tipo " + S.getTipo());
			 	}else {
					vRes.tipoVariable = S.getVariable();
				} 
			}
		| 	t = <tVALOR_ENTERO>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				if(t.image.length() < 10 && Long.parseLong(t.image) < 32767 && Long.parseLong(t.image) > -32766) {
					vRes.valorEnt = Integer.parseInt(t.image);
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Desboradmiento en la constante entera " + t.image);
				}
			}
		| 	t = <tCONSTCHAR>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.CHAR;
				vRes.valorChar = t.image.charAt(1);
				
			}
		| 	<tCONSTCAD>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.CADENA;
			}
		| 	<tTRUE>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				vRes.valorBool = true;
			}
		| 	<tFALSE>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				vRes.valorBool = false;
			}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	catch (SimboloNoEncontradoException e)
	{
	  try { 
	  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir);
	  }
	  catch(SimboloYaDeclaradoException e1) {
	  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
	  }
	  vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
	  error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
	}
	{
		return vRes;
	}
}