/**
 * Especificacion JavaCC para la Practica 8 (Procesadores de Lenguajes)
 * Pablo Garcia Garcia - 781020@unizar.es
 * Aaron Ibanez Espes - 779088@unizar.es
 * Ultima modificacion: 12/06/2021
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(MiniLeng) 
package analizador;
import java.io.IOException;
import java.lang.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import tabla_simbolos.TablaSimbolos;
import tabla_simbolos.Simbolo;
import tabla_simbolos.SimboloYaDeclaradoException;
import tabla_simbolos.SimboloNoEncontradoException;

class Valor
{
  Integer valorEnt;
  Boolean valorBool;
  Character valorChar;
  String codigo;
  Integer tamano;
  Simbolo.Clase_parametro claseParametro;
  Simbolo.Tipo_variable tipoVariable;
  Simbolo.Tipo_simbolo tipoSimbolo;
}

class Codigo
{
  String codigo;
  Simbolo S;

  public Codigo() {
    codigo = "";
    S = null;
  } 
}

class Tag
{
	public int tagVal;
	public String tagName;

	public Tag(int _tagVal, String _tagName) {
		tagVal=_tagVal;
		tagName=_tagName;
	}

	public String toString() {
		return "L" + tagVal;
	}

	public String code() {
		return "";
	}
}

class TagProgram extends Tag {
	public TagProgram(int _tagVal, String _tagName) {
		super(_tagVal,_tagName);
	}

	public String code() {
		return "; Programa " + tagName + "\n" + 
				"\tENP\t" + "L" + tagVal + "\n";
	}	
} 

class TagAction extends Tag {
	public TagAction(int _tagVal, String _tagName) {
		super(_tagVal,_tagName);
	}

	public String code() {
		return "; Declaracion accion " + tagName + "\n" + 
				"L" + tagVal + ":\n";
	}	
}

public class MiniLeng
{
  private static int DIR_INICIAL = 3;

  private static int nivel;

  private static int tagNum = 0;

  private static int dir = 3;
  
  private static boolean error = false;

  private static boolean necesariaErrorInicializada = false;

  private static boolean necesariaErrorIndice = false;

  private static TablaSimbolos tablaSimbolos;

  private static void panicMode()
  {
	Token t;
	do {
	t = getNextToken();
	} while (t.kind != tFIN_SENTENCIA && t!=null && t.kind != EOF );
  }

  private static void errorSintactico(ParseException e)
  {
    error = true;
    System.out.print("ERROR SINTACTICO(" + e.currentToken.next.beginLine + ", " + e.currentToken.next.beginColumn + "): ");
    System.out.print("Se encontro \"" + e.currentToken.next.image + "\" ");
    String expectedMSG = "";
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < e.expectedTokenSequences.length; i++)
    {
      if (maxSize < e.expectedTokenSequences [i].length)
      {
        maxSize = e.expectedTokenSequences [i].length;
      }
      for (int j = 0; j < e.expectedTokenSequences [i].length; j++)
      {
        expected.append(tokenImage [e.expectedTokenSequences [i] [j]]);
      }
      if (e.expectedTokenSequences [i] [e.expectedTokenSequences [i].length - 1] != 0)
      {
        expected.append(" o ");
      }
    }
    expected = expected.deleteCharAt(expected.length() - 1);
    expected = expected.deleteCharAt(expected.length() - 1);
    expectedMSG += "y se esperaba:" + expected.toString();
    System.out.println(expectedMSG);
    panicMode();
  }

  private static void error_semantico(int linea, int columna, String e)
  {
    error = true;
    System.out.println("ERROR SEMANTICO(" + linea + ", " + columna + "): " + e);
    //tablaSimbolos.imprimirTabla();
  }

  private static void warning(int linea, int columna, String e)
  {
    System.out.println("WARNING(" + linea + ", " + columna + "): " + e);
  }
  
  public static void main(String args []) throws ParseException
  {
    try {
      	if(args.length > 0) {
			MiniLeng parser = new MiniLeng(new java.io.FileInputStream(new java.io.File(args [0].concat(".ml"))));
	  	}else {
		    MiniLeng parser = new MiniLeng(System.in);
		    System.out.println("Leyendo de la entrada estandar...");
		}
		tablaSimbolos = new TablaSimbolos(); 
    	String codigo = MiniLeng.programa();
    	if(!error) {
    	  	try
    	  	{
				OutputStream fichero = new FileOutputStream(new String(args [0].concat(".code")));
				OutputStreamWriter osw = new OutputStreamWriter(fichero);
				BufferedWriter bw = new BufferedWriter(osw);
				bw.write(codigo);
				bw.close();
				osw.close();
				fichero.close();
				System.out.println("Compilacion finalizada. Se ha generado el fichero " + args [0] + ".code");
    	 	}
			catch (IOException e)
	        {
	        	System.out.println("Compilacion finalizada. No se ha podido generar el fichero " + args [0] + ".code");
	        }
   		}
    }
    catch (TokenMgrError e) {
		//Error lexico
		try {
			System.out.println("ERROR LEXICO(" + SimpleCharStream.getBeginLine() + "," +
			SimpleCharStream.getBeginColumn() + ")" + " simbolo no reconocido: " + SimpleCharStream.readChar());
		}
		catch(Exception err) { }
	}
  	catch (Error e) { 
        System.out.println("Se ha producido un error inesperado");
        System.out.println(e);
	}
	catch (IOException e) {
        System.out.println("Fichero no encontrado, formato de ejecucion \"MiniLeng [nombrefichero]\"");
   	}
  }
}

PARSER_END(MiniLeng)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"%" (~["\n"])* "\n">
| <"%%" (~["%"])* "%%"> 
}

TOKEN : /* PALABRAS RESERVADAS */
{
	<tPROGRAMA : "programa">
	{
	  //System.out.println("programa");
	}
|	<tVAR : "var">
	{
	  //System.out.println("var");
	}
|	<tPRINCIPIO : "principio">
	{
	  //System.out.println("principio");
	}
|	<tFIN : "fin">
	{
	  //System.out.println("fin");
	}
|	<tSI : "si">
	{
	  //System.out.println("si");
	}
|	<tENT : "ent">
	{
	  //System.out.println("ent");
	}
|	<tSI_NO : "si_no">
	{
	  //System.out.println("si_no");
	}
|	<tFSI : "fsi">
	{
	  //System.out.println("fsi");
	}
|	<tMQ : "mq"> 
	{
	  //System.out.println("mq");
	}
|	<tFMQ : "fmq">
	{
	  //System.out.println("fmq");
	}
|	<tVAL : "val">
	{
	  //System.out.println("val");
	}
|	<tREF : "ref">
	{
	  //System.out.println("ref");
	}
|	<tACCION : "accion">
	{
	  //System.out.println("accion");
	}
  
}

TOKEN: /* OPERADORES DE FLUJO */
{
	<tFIN_SENTENCIA : ";" >
 	{
    	//System.out.println("FIN_SENTENCIA");
 	}
| 	<tSEPARADOR : "," >
 	{
    	//System.out.println("SEPARADOR");
 	}
}

TOKEN : /* OPERADORES ARITMETICOS */
{
	<tSUMA : "+" >
 	{
    	//System.out.println("SUMA");
 	}
| 	<tRESTA : "-" >
 	{
    	//System.out.println("RESTA");
 	}
 | 	<tDIV : "/" | "DIV" >
 	{
    	//System.out.println("DIVISION");
 	}
 | 	<tMULT : "*" >
 	{
    	//System.out.println("MULT");
 	}
}

TOKEN : /* TIPOS DE DATOS */
{
	<tENTERO : "entero">
	{
	  //System.out.println("entero");
	}
|	<tBOOLEANO : "booleano">
	{
	  //System.out.println("booleano");
	}
|	<tCARACTER : "caracter">
	{
	  //System.out.println("caracter");
	}
}

TOKEN : /* OPERADORES BOOLEANOS */
{
	<tAND : "and">
	{
	  //System.out.println("and");
	}
|	<tOR : "or">
	{
	  //System.out.println("or");
	}
|	<tNOT : "not">
	{
	  //System.out.println("not");
	}
|	<tMAYOR : ">">
	{
	  //System.out.println(" >");
	}
|	<tMENOR : "<">
	{
	  //System.out.println("<");
	}
|	<tIGUAL : "=">
	{
	  //System.out.println("=");
	}
|	<tMAI : ">=">
	{
	  //System.out.println(">=");
	}
|	<tMEI : "<=">
	{
	  //System.out.println("<=");
	}
|	<tNI : "<>">
	{
	  //System.out.println("<>");
	}
|	<tOPAS : ":=">
	{
	  //System.out.println(":=");
	}
|	<tMOD : "mod">
	{
	  //System.out.println("mod");
	}
}

TOKEN: /* OPERADORES ENTRADA/SALIDA */
{
	<tESCRIBIR : "escribir">
	{
	  //System.out.println("escribir");
	}
|	<tLEER : "leer">
	{
	  //System.out.println("leer");
	}
}

TOKEN : /* OPERADORES CARACTERES */
{
	<tENTACAR : "entacar">
	{
	  //System.out.println("entacar");
	}
|	<tCARAENT : "caraent">
	{
	  //System.out.println("caraent");
	}
}

TOKEN : /* VALORES */
{
  	<#DIGITO : ["0"-"9"]>
| 	<#LETRA : ["a"-"z"]>
| 	<#SIGNO : [":", ",","?","=","[","]","{","}","(",")","<",">", "'","\"","=",",",".",",",";"," ", "/"] >
        
| 	< tVALOR_ENTERO : (< DIGITO >)+ >
  	{
    	//System.out.println("VALOR_ENTERO (Valor: " + matchedToken + ")"); 
  	}
|	<tTRUE : "true">
	{
	  	//System.out.println("true");
	}
|	<tFALSE : "false">
	{
	  	//System.out.println("FALSE");
	} 
| 	<tIDENTIFICADOR : ((< LETRA > | ("_")+(< DIGITO > | < LETRA >))(< DIGITO >)*)+ >
  	{
    	//System.out.println("IDENTIFICADOR (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCHAR : "\"" < LETRA > "\"" >
  	{
    	//System.out.println("CARACTER (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCAD : "\"" (~["\""])*  "\"" >
  	{
    	//System.out.println("CADENA (Valor: " + matchedToken + ")");
  	}
}


TOKEN : /* AGRUPACIONES */ 
{
  <tPAR_IZQ : "(">
  {
    //System.out.println("PAR_IZQ");
  }
| <tPAR_DER : ")">
  {
    //System.out.println("PAR_DCHA");
  }
} 

// ANALIZADOR SINTACTICO

/*
	<tPROGRAMA>	<tIDENTIFICADOR> ";" declaracion_variables() declaracion_acciones() bloque_sentencias() <EOF>
*/
String programa() :
{
	nivel = 0;
	String codigo = "";
	ArrayList<Codigo> codigoVariables;
	ArrayList<Codigo> codigoAcciones;
	String codigoSentencias = "";
	tablaSimbolos.inicializar_tabla();
	Token t = null;
	TagProgram program = null;
	Tag programEnd = null;
	Integer etiq;
}
{
	try {
		<tPROGRAMA>	t = <tIDENTIFICADOR>
		{
			tablaSimbolos.introducir_programa(t.image,dir,t.beginLine,t.beginColumn);
		  	program = new TagProgram(tagNum,t.image);
		  	tagNum++;
		  	programEnd = new Tag(tagNum,t.image);
		  	tagNum++;
			codigo = program.code();
		}
		";"
		codigoVariables = declaracion_variables()
		codigoAcciones = declaracion_acciones()
		codigoSentencias = bloque_sentencias() < EOF >
		{
		  	String err;
		  	int j;
		  	char[] cad;
			if(necesariaErrorInicializada) { 
				err = "\"Error en runtime: acceso a variable no inicializada\"";
			  	codigo += 	"error_inicializada:\n"+
			  				"; escribir\n" +
			  				"; cadena " + err + "\n";
			    cad = err.toCharArray();
			    j = 0;
			    for (char i : cad) {
			    	if (j != 0 && j != err.length() - 1) {
			        	codigo += "\tSTC\t" + Integer.valueOf(i) + "\n" + "\tWRT\t0\n";
			       	}
			    	j++;
			    }
				codigo += "\tJMP\tL1\n";
			}
			if(necesariaErrorIndice) { 
			    err = "\"Error en runtime: indice de acceso a vector fuera de rango\"";
				necesariaErrorIndice = true;
			  	codigo += 	"error_out_of_bounds:\n"+
			  				"; escribir\n" +
			  				"; cadena " + err + "\n";
			    cad = err.toCharArray();
			    j = 0;
			    for (char i : cad) {
			    	if (j != 0 && j != err.length() - 1) {
			        	codigo += "\tSTC\t" + Integer.valueOf(i) + "\n" + "\tWRT\t0\n";
			       	}
			    	j++;
			    }
			    codigo += "\tJMP\tL1\n";
		  	}
		  	Iterator<Codigo> codeIterator = codigoAcciones.iterator();
		  	Codigo fragmento;
		  	while(codeIterator.hasNext()) {
				fragmento = codeIterator.next();
				if(fragmento.S.getUsado()) {
					codigo += fragmento.codigo;
				}else {
					warning(fragmento.S.getLinea(),fragmento.S.getColumna(),"Accion no usada");
				}
		 	}

		 	codigo += "; Inicio " + t.image + "\n" +
					  program.toString() + ":\n";
					  
		 	codeIterator = codigoVariables.iterator();
		 	while(codeIterator.hasNext()) {
				fragmento = codeIterator.next();
				if(fragmento.S.getUsado()) {
					codigo += fragmento.codigo;
				}else {
					warning(fragmento.S.getLinea(),fragmento.S.getColumna(),"Variable no usada");
				}
		 	}

			codigo += codigoSentencias +
					  "; Final " + t.image + "\n" +
					  programEnd.toString() + ":\n" +
					  "\tLVP";
		}
	}
	catch (ParseException e) {
		errorSintactico(e);//(e, "La declaracion del programa es incorrecta");
	}
{
	/*System.out.println("ANTES de cerrar programa");
	tablaSimbolos.imprimirTabla();*/
	// Cerrar el programa y limpiar la tabla de simbolos
	tablaSimbolos.eliminar_variables(nivel);
	tablaSimbolos.eliminar_acciones(nivel);
	tablaSimbolos.eliminar_parametros(nivel);
	tablaSimbolos.eliminar_programa();

	//Si debug
	/*System.out.println("Despues de cerrar programa");
	tablaSimbolos.imprimirTabla();*/
}
{
	// Fin del compilador
	return codigo;
}
}

/*
	(declaracion() ";")*
*/
ArrayList<Codigo> declaracion_variables():
{
  	ArrayList<Codigo> codigo = new ArrayList<Codigo>();
  	ArrayList<Codigo> c = new ArrayList<Codigo>();
}
{
	try {
	  	(c=declaracion() ";"
	  	{
			codigo.addAll(c);
	  	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}	
}

/*
	tipo_variables() identificadores()
*/
ArrayList<Codigo> declaracion():
{
  	Simbolo.Tipo_variable tTipo = null;
  	ArrayList<Codigo> codigo = new ArrayList<Codigo>();
}
{
  	try {
	  	tTipo = tipo_variables() codigo=identificadores(tTipo)
	}
	catch (ParseException e)
	{
		errorSintactico(e); 
	}
	{
		return codigo;
	}
}

/*
	<tENTERO>|<tCARACTER>|<tBOOLEANO>
*/
Simbolo.Tipo_variable tipo_variables():
{
  Simbolo.Tipo_variable t = Simbolo.Tipo_variable.DESCONOCIDO;
}
{
 	try {
	  		<tENTERO>   { t = Simbolo.Tipo_variable.ENTERO; } 
	  	|   <tCARACTER> { t = Simbolo.Tipo_variable.CHAR; }
	  	| 	<tBOOLEANO> { t = Simbolo.Tipo_variable.BOOLEANO; }
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
	  return t;
	} 
}

/*
	<tIDENTIFICADOR> ( "," <tIDENTIFICADOR> )*
*/
ArrayList<Codigo> identificadores(Simbolo.Tipo_variable tipo): 
{
  	Token t = null;
  	Token tSize = null;
  	int tamano = 0;
  	ArrayList<Codigo> codigo = new ArrayList<Codigo>();
  	Codigo aux = new Codigo();
}
{
  	try {
	  	t = <tIDENTIFICADOR> ("[" tSize=<tVALOR_ENTERO>"]")? 
		{
		  	try {
		  	  	if(tSize != null) {
					tamano = Integer.parseInt(tSize.image);
	  	  	 	}
		  	  	if(tSize == null || tamano > 0) {
					aux.S = tablaSimbolos.introducir_variable(t.image,tipo,nivel,dir,tamano,t.beginLine,t.beginColumn);
					if(tSize != null) {
						aux.codigo += 	"; Tamano del vector\n" +
									"\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + aux.S.getDir() + "\n" +
							 		"\tSTC\t"+tamano+"\n" +
							 		"\tASG\n";
						for (int i = 1; i <= tamano ; i++) {	 		
							aux.codigo += 	"; Reservamos la direccion e inicializamos con valor centinela\n" +
								 		"; Accediendo a " + aux.S.getTipo() + " " + aux.S.getNombre() + "["+(i-1)+"]" + "\n" +
								 		"\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + (aux.S.getDir()+i) + "\n" +
								 		"\tSTC\t32768\n" +
								 		"\tASG\n";
						}
						dir+=tamano+1;
					}else {
					  	aux.codigo += "; Reservamos la direccion e inicializamos con valor centinela\n" +
							 "; Accediendo a " + aux.S.getTipo() + " " + aux.S.getNombre() + "\n" +
							 "\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + aux.S.getDir() + "\n" +
							 "\tSTC\t32768\n" +
							 "\tASG\n";
						dir++;
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "[" + tSize.image + "]\" el tama�o debe de ser positivo");
				}
			}
			catch (SimboloYaDeclaradoException e)
			{
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
			tSize = null;
			tamano = 0;
			codigo.add(aux);
			aux = new Codigo();
		}
	  	( "," t = <tIDENTIFICADOR> ("[" tSize=<tVALOR_ENTERO>"]")? 
	  	{
			try { 
				if(tSize != null) {
					tamano = Integer.parseInt(tSize.image);
	  	  	 	}
		  	  	if(tSize == null || tamano > 0) {
					aux.S = tablaSimbolos.introducir_variable(t.image,tipo,nivel,dir,tamano,t.beginLine,t.beginColumn);
					if(tSize != null) {
						aux.codigo += 	"; Tamano del vector\n" +
									"\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + aux.S.getDir() + "\n" +
							 		"\tSTC\t"+tamano+"\n" +
							 		"\tASG\n";
						for (int i = 1; i <= tamano ; i++) {	 		
							aux.codigo += 	"; Reservamos la direccion e inicializamos con valor centinela\n" +
								 		"; Accediendo a " + aux.S.getTipo() + " " + aux.S.getNombre() + "["+(i-1)+"]" + "\n" +
								 		"\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + (aux.S.getDir()+i) + "\n" +
								 		"\tSTC\t32768\n" +
								 		"\tASG\n";
						}
						dir+=tamano+1;
					}else {
					  	aux.codigo += "; Reservamos la direccion e inicializamos con valor centinela\n" +
							 "; Accediendo a " + aux.S.getTipo() + " " + aux.S.getNombre() + "\n" +
							 "\tSRF\t" + (nivel - aux.S.getNivel()) + "\t" + aux.S.getDir() + "\n" +
							 "\tSTC\t32768\n" +
							 "\tASG\n";
						dir++;
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "[" + tSize.image + "]\" el tama�o debe de ser positivo");
				}
			}
			catch (SimboloYaDeclaradoException e)
			{
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
			tSize = null;
			tamano = 0;
			codigo.add(aux);
			aux = new Codigo();
	  	}
	  	)*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	(declaracion_accion())*
*/
ArrayList<Codigo> declaracion_acciones():
{
	ArrayList<Codigo> codigo = new ArrayList<Codigo>();
  	Codigo c = new Codigo();
}
{
  	try {
	  	(c=declaracion_accion()
	  	{
			codigo.add(c); 
	  	})*
	}
	catch (ParseException e)
	{ 
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	cabecera_accion() ";" declaracion_variables() declaracion_acciones() bloque_sentencias()
*/
Codigo declaracion_accion():
{
	Codigo codigo = new Codigo();
  	Codigo codigoParams = null;
  	ArrayList<Codigo> codigoVariables = new ArrayList<Codigo>();
  	ArrayList<Codigo> codigoAcciones = new ArrayList<Codigo>();
  	String codigoSentencias = "";
  	TagAction accion = new TagAction(tagNum,"");
	tagNum++;
}
{
  	try {
	  	codigoParams = cabecera_accion(accion)
	  	{
	  	  	
	 	}
	  	codigoVariables = declaracion_variables()
	  	codigoAcciones = declaracion_acciones()
	  	codigoSentencias = bloque_sentencias()
	  	{

			codigo.S = codigoParams.S;
			
	  	  	Iterator<Codigo> codeIterator = codigoAcciones.iterator();
		  	Codigo fragmento;
		  	while(codeIterator.hasNext()) {
				fragmento = codeIterator.next();
				if(fragmento.S.getUsado()) {
					codigo.codigo += fragmento.codigo;
				}else {
					warning(fragmento.S.getLinea(),fragmento.S.getColumna(),"Accion no usada");
				}
		 	}

		 	codigo.codigo += codigoParams.codigo;
					  
		 	codeIterator = codigoVariables.iterator();
		 	while(codeIterator.hasNext()) {
				fragmento = codeIterator.next();
				if(fragmento.S.getUsado()) {
					codigo.codigo += fragmento.codigo;
				}else {
					warning(fragmento.S.getLinea(),fragmento.S.getColumna(),"Variable no usada");
				}
		 	}
	  	  		
  	  		codigo.codigo += codigoSentencias +
					 "; Fin accion " + accion.tagName + "\n" +
					 "\tCSF\n";
			//tablaSimbolos.imprimirTabla();
			tablaSimbolos.eliminar_variables(nivel);
			tablaSimbolos.eliminar_acciones(nivel);
			tablaSimbolos.eliminar_parametros(nivel);
			nivel--;
		}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tACCION> <tIDENTIFICADOR> (parametros_formales())?
*/
Codigo cabecera_accion(TagAction etiq):
{
  	String codigoParams = "";
  	Token t = null;
  	Codigo accion = new Codigo();
}
{
  	try {
	  	<tACCION> t = <tIDENTIFICADOR>
		{
		  	try { 
				accion.S = tablaSimbolos.introducir_accion(t.image,nivel,tagNum-1,t.beginLine,t.beginColumn);
				etiq.tagName = t.image;
				accion.codigo = etiq.code();
			}
			catch (SimboloYaDeclaradoException e)
			{
			  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}			
			nivel++;
			dir = DIR_INICIAL;
			
		}
	  	(codigoParams = parametros_formales(accion.S)
	  	{
			accion.codigo += codigoParams;
	  	})? ";"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return accion;
	}
}

/*
	"(" (parametros() (";" parametros())*)? ")"
*/
String parametros_formales(Simbolo accion):
{
  	String codigo = "";
  	String codigoParam = "";
}
{
  	try {
	  	"(" (codigo=parametros(accion) (";" codigoParam=parametros(accion)
	  	{
			codigo+=codigoParam;
	 	})*)? ")"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tIDENTIFICADOR> ("," <tIDENTIFICADOR>)*
*/
String lista_parametros(Simbolo.Clase_parametro tClase, Simbolo.Tipo_variable tTipo, Simbolo accion):
{
	Token t = null;
	Token tSize = null;
	int tamano = 0;
	String codigo = "";
}
{
  	try {
	  	 t = <tIDENTIFICADOR> ("[" tSize=<tVALOR_ENTERO>"]")?
	  	{
	  	  	try {
	  	  	  	if(tSize != null) {
					tamano = Integer.parseInt(tSize.image);
	  	  	 	}
	  	  	  	if(tSize == null || tamano > 0) {  
		  			Simbolo param = tablaSimbolos.introducir_parametro(t.image,tTipo,tClase,nivel,dir,tamano,t.beginLine,t.beginColumn);
					if(accion != null) {
		  				accion.addParametro(param);
		  			}
		  			if(tSize != null && tClase == Simbolo.Clase_parametro.VAL) {
		  			  	for (int j = tamano; j >= 0 ; j--) {
							codigo += "; Recuperacion del parametro " + t.image + "\n" +
			  					 	  "\tSRF\t0\t" + (dir + j) + "\n" +
			  					 	  "\tASGI\n";
			  			}
						dir+=tamano+1;
					}else {
					  	codigo += "; Recuperacion del parametro " + t.image + "\n" +
			  					 "\tSRF\t0\t" + dir + "\n" +
			  					 "\tASGI\n";
						dir++;
					}
	  			}else {
					error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "[" + tSize.image + "]\" el tama�o debe de ser positivo");
	  			}
			}
			catch (SimboloYaDeclaradoException e) {
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
			tSize = null;
			tamano = 0;
  	  	}
  	  	("," t = <tIDENTIFICADOR> ("[" tSize=<tVALOR_ENTERO>"]")?
  	  	{
  	  	  	try {
				Simbolo param1 = tablaSimbolos.introducir_parametro(t.image,tTipo,tClase,nivel,dir,0,t.beginLine,t.beginColumn);
				accion.addParametro(param1);
				codigo += "; Parametro " + t.image + "\n" +
	  					 "\tSRF\t0\t" + dir + "\n" +
	  					 "\tASGI\n";
	  			if(tSize != null) {
					dir+=tamano;
				}else {
					dir++;
				}
			}
			catch (SimboloYaDeclaradoException e) {
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya existe");
			}
  	  	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	clase_parametros() tipo_variables() lista_parametros()
*/
String parametros(Simbolo accion):
{
  	String codigo = "";
	Simbolo.Clase_parametro tClase;
	Simbolo.Tipo_variable tTipo = Simbolo.Tipo_variable.DESCONOCIDO;
}
{
  	try {
	  	tClase = clase_parametros() tTipo = tipo_variables() codigo=lista_parametros(tClase,tTipo,accion)
	}
	catch (ParseException e) 
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tVAL>|<tREF>
*/
Simbolo.Clase_parametro clase_parametros():
{
	Simbolo.Clase_parametro t = null; 
}
{
  	try {
	  		<tVAL> { t = Simbolo.Clase_parametro.VAL; }
	  	| 	<tREF> { t = Simbolo.Clase_parametro.REF; }
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return t;
	}
}

/*
	<tPRINCIPIO> lista_sentencias() <tFIN>
*/
String bloque_sentencias():
{
	String codigo = "";
}
{
	try {
	  	<tPRINCIPIO> codigo=lista_sentencias() <tFIN>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	(sentencia())+
*/
String lista_sentencias():
{
	String codigo = "";
	String codigoSentencia = "";
}
{
  	try {
	  	(codigoSentencia=sentencia()
	  	{
	  		codigo += codigoSentencia;
	 	})+
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	leer() ";"
	| 	escribir() ";"
	| 	<tIDENTIFICADOR> (asignacion() | invocacion_accion())
	| 	seleccion()
	| 	mientras_que()
*/
String sentencia():
{
  	String codigo = "";
  	Simbolo S = null;
  	Token t = null;
}
{
  	try {
	  		codigo = leer() ";"
		| 	codigo = escribir() ";"
		| 	t=<tIDENTIFICADOR> (codigo = asignacion(t) | codigo=invocacion_accion(t))
		| 	codigo = seleccion()
		| 	codigo = mientras_que()
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tLEER> "(" lista_asignables() ")"
*/
String leer():
{
  	String codigo = "";
}
{
  	try {
	  	<tLEER> "(" codigo=lista_asignables() ")"
	  	{
			codigo = "; Leer\n" + codigo;
	 	}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return codigo;
	}
}

/*
	<tIDENTIFICADOR> ("," <tIDENTIFICADOR>)*
*/
String lista_asignables(): // Esta funcion antes llamaba a lista_parametros POR SI ERROR
{
  	String codigo = "";
  	Token t = null;
  	Simbolo S = null;
  	Valor v = null;
}
{
  	try {
  	  	t=<tIDENTIFICADOR> ("[" v = expresion() "]")?
  	  	{
  	  	  	try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				S.setUsado(true);
				if(!(S.getTipo() == Simbolo.Tipo_simbolo.VARIABLE || 
				  (S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF))) {
					error_semantico(t.beginLine, t.beginColumn, "Se esperaba variable o parametro por referencia y se obtuvo "+S.getTipo());	
				}else if(S.getVariable() == Simbolo.Tipo_variable.BOOLEANO) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion lectura no valida para el tipo "+S.getVariable());	
				}else if(v != null && S.getTamano() == 0) {
			 		error_semantico(t.beginLine, t.beginColumn, t.image + " no es un vector");
				}else if(v != null && v.tipoVariable != Simbolo.Tipo_variable.ENTERO) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice debe ser de tipo entero");
				}else if(v != null && v.valorEnt != null && (v.valorEnt > S.getTamano()-1 || v.valorEnt < 0)) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice se encuentra fuera de rango");  	
				}else if(v == null && S.getTamano() > 0) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion lectura no valida para vectores");
				}else {
					if(v == null) {
					  	if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
							codigo +=  "; Direccion del parametro " + S.getNombre() + "\n" +
									  "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
									  "; Direccion de la referencia " + S.getNombre() + "\n" +
									  "\tDRF\n";
						}else { 
							codigo += "; Direccion de la variable " + S.getNombre() + "\n" +
									 "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						}
					}else {
						necesariaErrorIndice = true;
					  	codigo +=    "; Comprobar underflow\n" +
								    "\tSTC\t0\n" +
								    v.codigo +
								    "\tGT\n" +
								    "\tJMT\terror_out_of_bounds\n" +
								    "; Comprobar overflow\n" +
								    "; Buscando el tamano del vector " + S.getTipo() + " " + S.getNombre() + "\n" +
								    "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
								    "\tDRF\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
									"\tLTE\n" +
									"\tJMT\terror_out_of_bounds\n" +
									"; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
									"\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
							  		"\tPLUS\n" +
							  		"\tSTC\t1\n" +
							  		"\tPLUS\n";
					}	       		
				  	if (S.getVariable() == Simbolo.Tipo_variable.ENTERO){
			       		codigo += "\tRD\t1\n";
		      		}else if (S.getVariable() == Simbolo.Tipo_variable.CHAR){
			       		codigo += "\tRD\t0\n";
			      	}
		     	}
			}
			catch (SimboloNoEncontradoException e) { 
				try{
				  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir,0,t.beginLine, t.beginColumn);
				}
				catch(SimboloYaDeclaradoException e1) {
				  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
				}
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
			}
			v = null;
		}
  	  	("," t=<tIDENTIFICADOR> ("[" v = expresion() "]")?
  	  	{
			try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				S.setUsado(true);
				if(!(S.getTipo() == Simbolo.Tipo_simbolo.VARIABLE || 
				  (S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF))) {
					error_semantico(t.beginLine, t.beginColumn, "Se esperaba variable o parametro por referencia y se obtuvo "+S.getTipo());	
				}else if(S.getVariable() == Simbolo.Tipo_variable.BOOLEANO) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion lectura no valida para el tipo "+S.getVariable());	
				}else if(v != null && S.getTamano() == 0) {
			 		error_semantico(t.beginLine, t.beginColumn, t.image + " no es un vector");
				}else if(v != null && v.tipoVariable != Simbolo.Tipo_variable.ENTERO) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice debe ser de tipo entero");
				}else if(v != null && v.valorEnt != null && (v.valorEnt > S.getTamano()-1 || v.valorEnt < 0)) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice se encuentra fuera de rango");  	
				}else if(v == null && S.getTamano() > 0) {
					error_semantico(t.beginLine, t.beginColumn, "Operacion lectura no valida para vectores");
				}else {
					if(v == null) {
					  	if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
							codigo +=  "; Direccion del parametro " + S.getNombre() + "\n" +
									  "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
									  "; Direccion de la referencia " + S.getNombre() + "\n" +
									  "\tDRF\n";
						}else { 
							codigo += "; Direccion de la variable " + S.getNombre() + "\n" +
									 "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						}
					}else {
						necesariaErrorIndice = true;
					  	codigo +=    "; Comprobar underflow\n" +
								    "\tSTC\t0\n" +
								    v.codigo +
								    "\tGT\n" +
								    "\tJMT\terror_out_of_bounds\n" +
								    "; Comprobar overflow\n" +
								    "; Buscando el tamano del vector " + S.getTipo() + " " + S.getNombre() + "\n" +
								    "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
								    "\tDRF\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
									"\tLTE\n" +
									"\tJMT\terror_out_of_bounds\n" +
									"; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
									"\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
							  		"\tPLUS\n" +
							  		"\tSTC\t1\n" +
							  		"\tPLUS\n";
					}	       		
				  	if (S.getVariable() == Simbolo.Tipo_variable.ENTERO){
			       		codigo += "\tRD\t1\n";
		      		}else if (S.getVariable() == Simbolo.Tipo_variable.CHAR){
			       		codigo += "\tRD\t0\n";
			      	}
		     	}
			}
			catch (SimboloNoEncontradoException e) { 
				try{
				  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir,0,t.beginLine, t.beginColumn);
				}
				catch(SimboloYaDeclaradoException e1) {
				  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
				}
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
			}
  	 	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tESCRIBIR> "(" lista_escribibles() ")"
*/
String escribir():
{
  	String codigo = "";
}
{
  	try {
	  	<tESCRIBIR> "(" codigo = lista_escribibles() ")"
	  	{
			codigo = "; Escribir\n" + codigo;
	 	} 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return codigo;
	}
}

/*
	factor() (","(factor()))*
*/
String lista_escribibles():
{
  	String codigo = "";
  	Valor v = null;
  	Simbolo S = null;
}
{
  	try {
	  	v = expresion()
	  	{
	  	  	
			if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
				error_semantico(token.beginLine, token.beginColumn, "Operacion no valida para el tipo "+v.tipoVariable);
			}else if(v.tipoVariable == Simbolo.Tipo_variable.CHAR && v.tamano == null) { 
				codigo += v.codigo +
						  "\tWRT\t0\n";
			}else if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.tamano == null) {
				codigo += v.codigo +
						  "\tWRT\t1\n";
			}else if(v.tipoVariable == Simbolo.Tipo_variable.CADENA) {
				codigo += v.codigo;
			}else if(v.tamano != null){
				codigo += "; escribiendo vector\n" +
						  "\tSTC\t91\n" +
						  "\tWRT\t0\n" +
						  v.codigo.substring(0, v.codigo.lastIndexOf("\tDRF\n"));
				for (int j = 1; j <= v.tamano ; j++) {
					codigo += "; escribiendo "+ j + "\n" +
							  "\tDUP\n" +
							  "\tSTC\t"+j+"\n"+
							  "\tPLUS\n"+
							  "\tDRF\n";
					if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
						codigo += "\tWRT\t1\n";
					}else if(v.tipoVariable == Simbolo.Tipo_variable.CHAR) {
						codigo += "\tWRT\t0\n";
					}
					if(j!=v.tamano) {
						codigo += "\tSTC\t44\n" +
								  "\tWRT\t0\n";
					}
				}
				codigo += "\tSTC\t93\n" +
						  "\tWRT\t0\n";
			}					
	 	}
	  	(","(v = expresion())
		{
			if(v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
				error_semantico(token.beginLine, token.beginColumn, "Operacion no valida para el tipo "+v.tipoVariable);
			}else if(v.tipoVariable == Simbolo.Tipo_variable.CHAR && v.tamano == null) { 
				codigo += v.codigo +
						  "\tWRT\t0\n";
			}else if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.tamano == null) {
				codigo += v.codigo +
						  "\tWRT\t1\n";
			}else if(v.tipoVariable == Simbolo.Tipo_variable.CADENA) {
				codigo += v.codigo;
			}else if(v.tamano != null){
				codigo += "; escribiendo vector\n" +
						  "\tSTC\t91\n" +
						  "\tWRT\t0\n" +
						  v.codigo.substring(0, v.codigo.lastIndexOf("\tDRF\n"));
				for (int j = 1; j <= v.tamano ; j++) {
					codigo += "; escribiendo "+ j + "\n" +
							  "\tDUP\n" +
							  "\tSTC\t"+j+"\n"+
							  "\tPLUS\n"+
							  "\tDRF\n";
					if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
						codigo += "\tWRT\t1\n";
					}else if(v.tipoVariable == Simbolo.Tipo_variable.CHAR) {
						codigo += "\tWRT\t0\n";
					}
					if(j!=v.tamano) {
						codigo += "\tSTC\t44\n" +
								  "\tWRT\t0\n";
					}
				}
				codigo += "\tSTC\t93\n" +
						  "\tWRT\t0\n";
			}
  		}
	  	)*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tOPAS> expresion() ";"
*/
String asignacion(Token t):
{
	String codigo = "";
	Simbolo S = null;
	Valor v = null;
	Valor v2 = null;
}
{	
  	try {
  	  	("["v=expresion()"]")?
	  	 {
		 	try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				S.setUsado(true);
				if(S.getTipo() != Simbolo.Tipo_simbolo.VARIABLE && S.getTipo() != Simbolo.Tipo_simbolo.PARAMETRO) {
					error_semantico(t.beginLine, t.beginColumn, "No se pueden realizar asignaciones sobre " + S.getTipo());
				}else if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.VAL) {
					error_semantico(t.beginLine, t.beginColumn, "No se pueden realizar asignaciones sobre parametros por valor");
				}else if(v != null && S.getTamano() == 0) {
			 		error_semantico(t.beginLine, t.beginColumn, t.image + " no es un vector");
				}else if(v != null && v.tipoVariable != Simbolo.Tipo_variable.ENTERO) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice debe ser de tipo entero");
				}else if(v != null && v.valorEnt != null && (v.valorEnt > S.getTamano()-1 || v.valorEnt < 0)) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice se encuentra fuera de rango");
				}else if(v != null && v.tamano!=null && v.tamano > 0) { 
					error_semantico(t.beginLine, t.beginColumn, "El indice no puede ser un vector");
				}else if(v == null && S.getTamano() > 0) {
					if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						codigo =  "; Direccion del parametro " + S.getNombre() + "\n" +
								  "\tSRF\t0\t" + S.getDir() + "\n" +
								  "; Direccion de la referencia " + S.getNombre() + "\n" +
								  "\tDRF\n";
					}else { 
						codigo = "; Direccion de la variable " + S.getNombre() + "\n" +
								 "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
					}
				}else {
					if(v == null) {
					  	if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
							codigo =  "; Direccion del parametro " + S.getNombre() + "\n" +
									  "\tSRF\t0\t" + S.getDir() + "\n" +
									  "; Direccion de la referencia " + S.getNombre() + "\n" +
									  "\tDRF\n";
						}else { 
							codigo = "; Direccion de la variable " + S.getNombre() + "\n" +
									 "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						}
					}else {
						necesariaErrorIndice = true;
					  	codigo =    "; Comprobar underflow\n" +
								    "\tSTC\t0\n" +
								    v.codigo +
								    "\tGT\n" +
								    "\tJMT\terror_out_of_bounds\n" +
								    "; Comprobar overflow\n" +
								    "; Buscando el tamano del vector " + S.getTipo() + " " + S.getNombre() + "\n" +
								    "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
								    "\tDRF\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
									"\tLTE\n" +
									"\tJMT\terror_out_of_bounds\n" +
									"; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
									"\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						if(S.getTipo() == Simbolo.Tipo_simbolo.PARAMETRO && S.getParametro() == Simbolo.Clase_parametro.REF) {
						  codigo += "\tDRF\n";
						}
						codigo +=	v.codigo +
							  		"\tPLUS\n" +
							  		"\tSTC\t1\n" +
							  		"\tPLUS\n";
					}
				}
			}
			catch (SimboloNoEncontradoException e) {
				try{  
				  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir,0,t.beginLine, t.beginColumn);
				  	S = tablaSimbolos.buscar_simbolo(t.image);
					S.setUsado(true);
				}
				catch(SimboloYaDeclaradoException e1) {
				  	error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" ya declarado");  
				}
				error_semantico(t.beginLine, t.beginColumn, "\"" + t.image + "\" no declarado");	  
			} 
		}  
	  	<tOPAS>  v2 = expresion()
		{
			if (S.getVariable() !=v2.tipoVariable && v2.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO 
			&& S.getVariable() != Simbolo.Tipo_variable.DESCONOCIDO) {  
	      		error_semantico(t.endLine, t.endColumn, "Asignacion imposible entre:" + S.getVariable() + " y " + v2.tipoVariable);
	     	}else if((v == null && S.getTamano() == 0 || v != null && S.getTamano() > 0) && v2.tamano!=null && v2.tamano>0) {
				error_semantico(t.beginLine, t.beginColumn, "No se puede asignar a " + S.getVariable() + " un VECTOR DE " + v2.tipoVariable);
			}else if(v == null && S.getTamano() > 0 && v2.tamano==null) {
				error_semantico(t.beginLine, t.beginColumn, "No se puede asignar a un VECTOR DE " + v2.tipoVariable + " un " + S.getVariable());
			}else if(v == null && S.getTamano() > 0 && v2.tamano!=null && v2.tamano!=S.getTamano()) {
				error_semantico(t.beginLine, t.beginColumn, "Asignacion imposible entre vectores de distinto tamano");
			}else if(v == null && S.getTamano() > 0 && v2.tamano!=null && v2.tamano==S.getTamano()) {
				codigo +=	"; copiando vectores" + "\n";
				for (int j = 1; j <= S.getTamano() ; j++) {
					  codigo +=	"; asignando posicion "+ j + "\n" +
					  			"\tDUP\n" +
					  			"\tSTC\t"+j+"\n"+
					  			"\tPLUS\n"+
				  	  			v2.codigo.substring(0, v2.codigo.lastIndexOf("\tDRF\n")) +
				  	  			"\tSTC\t"+j+"\n"+
					  			"\tPLUS\n"+
					  			"\tDRF\n"+
					  			"\tASG\n";  			
				}
			}else { 
	        	codigo += 	v2.codigo +
	        				"; Asignacion\n" +
	        				"\tASG\n";

	     	}
		}
	  	";"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	(argumentos())? ";"
*/
String invocacion_accion(Token t):
{
	String codigo = "";
  	Simbolo S = null;
  	ArrayList<Valor> args = new ArrayList<Valor>();
}
{
  	try {
	  	(args = argumentos())?
		{
			try { 
				S = tablaSimbolos.buscar_simbolo(t.image);
				S.setUsado(true);
				if(S.getTipo() != Simbolo.Tipo_simbolo.ACCION) {
					error_semantico(t.beginLine, t.beginColumn, "\'" + t.image + "\' no es una accion");
				}else {
				  	Boolean match = true;
					if(args.size() != S.getListaParametros().size()) {
					  	match = false;
					}else {
				        for (int i = args.size()-1; i >= 0 ; i--) {
				          	if(S.getListaParametros().get(i).getParametro() == Simbolo.Clase_parametro.VAL) {
								if(S.getListaParametros().get(i).getTamano() > 0) {
									for (int j = 0; j <= S.getListaParametros().get(i).getTamano() ; j++) {
										codigo += args.get(i).codigo.substring(0, args.get(i).codigo.lastIndexOf("\tDRF\n")) +
												  "\tSTC\t"+j+"\n"+
												  "\tPLUS\n"+
												  "\tDRF\n";
									}
								}else {
										codigo += args.get(i).codigo;
								}
								if(args.get(i).tipoVariable != S.getListaParametros().get(i).getVariable() &&
								   args.get(i).tamano != S.getListaParametros().get(i).getTamano() &&
								   args.get(i).tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO) {
									match = false;
								}
								/*if (args.get(i).claseParametro == Simbolo.Clase_parametro.REF) {
									error_semantico(t.endLine, t.endColumn, "Se esta pasando un parametro REF y se espera VAL");
								}*/
							}else {
							  	if(args.get(i).tipoSimbolo != Simbolo.Tipo_simbolo.VARIABLE ||
							  	  (args.get(i).tipoSimbolo != Simbolo.Tipo_simbolo.PARAMETRO && args.get(i).claseParametro != Simbolo.Clase_parametro.REF)) { 
								  	codigo += args.get(i).codigo.substring(0, args.get(i).codigo.lastIndexOf("\tDRF\n"));
									if(args.get(i).tipoVariable != S.getListaParametros().get(i).getVariable() &&
									   args.get(i).tamano != S.getListaParametros().get(i).getTamano() &&
									   args.get(i).tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO) {
										match = false;
									}
								}else {
										error_semantico(t.endLine, t.endColumn, "Parametro no referenciable");
								}
							}
						}
					}
					if (!match) {
						String params = "(";
					  	for (Simbolo param : S.getListaParametros()) {
					  	  	if (param.getTamano() > 0) {
								params += "VECTOR["+param.getTamano()+"] DE " + param.getVariable() + ",";
					  	 	}else {
								params += param.getVariable() + ",";
					  		}
					 	}
					 	params += ")";
					 	String inv = "(";
					  	for (Valor i : args) {
					  	  	if (i.tamano != null) {
								inv += "VECTOR["+i.tamano+"] DE " + i.tipoVariable + ",";
					  	 	}else {
								inv += i.tipoVariable + ",";
					  		}
					 	}
					 	inv += ")";
						error_semantico(t.beginLine, t.beginColumn, "Invocacion a \'" + t.image + params + "\' con \'" + t.image + inv + "\'");
					}else {
						codigo += "; Invocacion a " + S.getNombre() + "\n" +
								 "\tOSF\t" + (tablaSimbolos.tamano_bloque_nivel(nivel)-1) + "\t" + (nivel - S.getNivel()) + "\tL" + S.getDir() + "\n";
					}
				} 
			}
			catch (SimboloNoEncontradoException e) {
				error_semantico(t.beginLine, t.beginColumn, "\'" + t.image + "\' accion no declarada");
			}	
		}
	  	";"
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return codigo;
	}
}

/*
	<tMQ> expresion() lista_sentencias() <tFMQ>
*/
String mientras_que():
{
	String codigo = "";
	String codigoSentencias = "";
  	Token t = null;
  	Valor v = null;
}
{
  	try {
	  	t = <tMQ> v = expresion()
		{
			if (v.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && v.tipoVariable != Simbolo.Tipo_variable.BOOLEANO) {
				error_semantico(t.endLine, t.endColumn, "Se esperaba booleano y se encontro " + v.tipoVariable);
			}
		}
	  	codigoSentencias = lista_sentencias() <tFMQ>
	  	{
			if(v.valorBool == null || v.valorBool != false) {
				Tag tagMq = new Tag(tagNum,"mq");
				tagNum++;
				Tag tagFmq = new Tag(tagNum,"fmq");
				tagNum++;
				codigo = "; Principio MQ\n" +
						 "; Expresion\n" +
						 tagMq.toString() + ":\n" +
						 v.codigo +
						 "; Salir del bucle si la guarda se evalua a falso\n" +
						 "\tJMF\t" + tagFmq.toString() + "\n" +
						 "; Si true\n" + codigoSentencias +
						 "; Fin de la iteracion. Saltar a la cabecera del bucle.\n"+
						 "\tJMP\t" + tagMq.toString() + "\n" +
						 "; Fin MQ\n" +
						 tagFmq.toString() + ":\n";
			}else {
			  	codigo = "; MQ (Optimizacion, codigo de bucle no alcanzable)";
			}
	 	}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return codigo;
	}
}

/*
	< tSI > expresion() < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())? < tFSI >
*/
String seleccion():
{
  	String codigo = "";
  	String codigoV = "";
  	String codigoF = "";
  	Token t = null;
  	Valor v = null;
}
{
  	try {
	  	t = < tSI > v = expresion()
		{
			if (v.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && v.tipoVariable != Simbolo.Tipo_variable.BOOLEANO) {
				error_semantico(t.endLine, t.endColumn, "Se esperaba booleano y se encontro " + v.tipoVariable);
			}
		}
	  	< tENT > codigoV=lista_sentencias() (< tSI_NO > codigoF=lista_sentencias())? < tFSI >
	  	{
			if(v.valorBool != null && v.valorBool == true) {
				codigo = "; IF (Optimizacion siempre true)\n" + codigoV;
			}else if (v.valorBool != null && v.valorBool == false) {
			  	codigo = "; IF (Optimizacion siempre false)\n" + codigoF;
			}else {
				Tag tagFsi = new Tag(tagNum, "fsi");
				tagNum++;
				codigo = "; Principio IF\n" +
						 "; Expresion\n" + v.codigo;
				if(codigoF != "") {
					Tag tagSino = new Tag(tagNum,"sino");
					tagNum++;
					codigo += "\tJMF\t" + tagSino.toString() + "\n" +
						 	  "; Si true\n" + codigoV +
						 	  "\tJMP\t" + tagFsi.toString() + "\n" +
							  tagSino.toString() + ":\n" +
						 	  "; Si false\n" + codigoF;
				}else {
					codigo += "\tJMF\t" + tagFsi.toString() + "\n" +
						 	  "; Si true\n" + codigoV;
				}
				codigo += "; Fin IF\n" +
						  tagFsi.toString() + ":\n";
			}
	 	} 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
  		return codigo;
	}
}

/*
	"(" lista_expresiones() ")"
*/
ArrayList<Valor> argumentos():
{
  ArrayList<Valor> res = null;
}
{
  	try {
	  	"(" res = lista_expresiones() ")"
	  	
	}
	catch (ParseException e) 
	{
		errorSintactico(e);
	}
	{
		return res;
	}
}

/*
	expresion() ("," expresion())*
*/
ArrayList<Valor> lista_expresiones():
{
  	ArrayList<Valor> res = new ArrayList<Valor>();
  	Valor v = null;
}
{
  	try {
	  	v = expresion()
	  	{
			res.add(v);
	 	}
	  	("," v = expresion()
	  	{
			res.add(v);
	 	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return res;
	}
}

/*
	expresion_simple() (operador_relacional() expresion_simple())*
*/
Valor expresion():
{
  	Valor vAux = null;
  	Valor vRes = new Valor();
  	Token operador = null;
}
{
  	try {
	  	vRes = expresion_simple()
	  	(operador = operador_relacional() vAux = expresion_simple()
	  	{
			if((vAux.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO || vRes.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO) && vRes.tipoVariable != vAux.tipoVariable) {
				vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
				error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible entre " + vRes.tipoVariable + " y " + vAux.tipoVariable);
			}else if(vAux.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO || vRes.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
		 	   	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
			}else if(vAux.tamano != null || vRes.tamano != null) {
			  	vRes.tamano = null;
			  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
			  	error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible para vector");
		 	}else if(vRes.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && (operador.kind == tIGUAL || operador.kind == tNI)) {
				vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO; 
			  	vRes.codigo += vAux.codigo;
				if(operador.kind == tIGUAL) {
					vRes.codigo += "\tEQ\n";
				}else {
					vRes.codigo += "\tNEQ\n";
				}
			  	if(vAux.valorBool != null && vRes.valorBool != null) {
			  	  	warning(operador.beginLine, operador.beginColumn, "Expresion constante");
					if(operador.kind == tIGUAL) {
						vRes.valorBool = vRes.valorBool == vAux.valorBool;
					}else {
						vRes.valorBool = vRes.valorBool != vAux.valorBool;
					}
				}  
		 	}else if(vRes.tipoVariable != Simbolo.Tipo_variable.ENTERO && vRes.tipoVariable != Simbolo.Tipo_variable.CHAR) {
				error_semantico(operador.beginLine, operador.beginColumn, "Operador relacion \'" + operador.image + "\' no aplicable para " + vRes.tipoVariable);
			}else {
			  	vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO; 
			  	vRes.codigo += vAux.codigo;
			  	if(operador.kind == tMAYOR) {
					vRes.codigo += "\tGT\n";
				}else if(operador.kind == tMENOR) {
					vRes.codigo += "\tLT\n";
				}else if(operador.kind == tIGUAL) {
					vRes.codigo += "\tEQ\n";
				}else if(operador.kind == tMAI) {
					vRes.codigo += "\tGTE\n";
				}else if(operador.kind == tMEI) {
					vRes.codigo += "\tLTE\n";
				}else {
					vRes.codigo += "\tNEQ\n";
				}
			  	if(vRes.tipoVariable == Simbolo.Tipo_variable.ENTERO && vAux.valorEnt != null && vRes.valorEnt != null) {
			  	  	warning(operador.beginLine, operador.beginColumn, "Expresion constante");
					if(operador.kind == tMAYOR) {
						vRes.valorBool = vRes.valorEnt > vAux.valorEnt;
					}else if(operador.kind == tMENOR) {
						vRes.valorBool = vRes.valorEnt < vAux.valorEnt;
					}else if(operador.kind == tIGUAL) {
						vRes.valorBool = vRes.valorEnt == vAux.valorEnt;
					}else if(operador.kind == tMAI) {
						vRes.valorBool = vRes.valorEnt >= vAux.valorEnt;
					}else if(operador.kind == tMEI) {
						vRes.valorBool = vRes.valorEnt <= vAux.valorEnt;
					}else {
						vRes.valorBool = vRes.valorEnt != vAux.valorEnt;
					}
				}else if(vRes.tipoVariable == Simbolo.Tipo_variable.CHAR && vAux.valorEnt != null && vRes.valorEnt != null) {
			  	  	warning(operador.beginLine, operador.beginColumn, "Expresion constante");
					if(operador.kind == tMAYOR) {
						vRes.valorBool = vRes.valorChar > vAux.valorChar;
					}else if(operador.kind == tMENOR) {
						vRes.valorBool = vRes.valorChar < vAux.valorChar;
					}else if(operador.kind == tIGUAL) {
						vRes.valorBool = vRes.valorChar == vAux.valorChar;
					}else if(operador.kind == tMAI) {
						vRes.valorBool = vRes.valorChar >= vAux.valorChar;
					}else if(operador.kind == tMEI) {
						vRes.valorBool = vRes.valorChar <= vAux.valorChar;
					}else {
						vRes.valorBool = vRes.valorChar != vAux.valorChar;
					}
				}
			}
	 	})*
	} 
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tMAYOR>|<tMENOR>|<tIGUAL>|<tMAI>|<tMEI>|<tNI>
*/
Token operador_relacional():
{
	Token t = null;
}
{
  	try {
	  		t = <tMAYOR>
		|	t = <tMENOR>
		|	t = <tIGUAL> 
		|	t = <tMAI>
		|	t = <tMEI>
		|	t = <tNI>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	}
}

/*
	termino() (operador_aditivo() termino())*
*/
Valor expresion_simple():
{
	Valor vAux = null;
	Valor vRes = new Valor();
	Token operador = null;
}
{
  	try {
	  	vRes = termino()
	  	(operador = operador_aditivo() vAux = termino()
	  	{
			if((vAux.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO || vRes.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO) && vRes.tipoVariable != vAux.tipoVariable) {
				vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
				error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible entre " + vRes.tipoVariable + " y " + vAux.tipoVariable);
		 	}else if(vAux.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO || vRes.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
		 	   	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
		 	}else if(vAux.tamano != null || vRes.tamano != null) {
			  	vRes.tamano = null;
			  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
			  	error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible para vector");
		 	}else if(operador.kind == tSUMA || operador.kind == tRESTA) {
				if(vRes.tipoVariable == Simbolo.Tipo_variable.ENTERO && vAux.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
				  	vRes.codigo += vAux.codigo;
				  	if(operador.kind == tSUMA) {
						vRes.codigo += "\tPLUS\n";
				 	}else {
						vRes.codigo += "\tSBT\n";
					}
					vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
					if(vRes.valorEnt != null && vAux.valorEnt != null) {
					  	long res;
					  	if(operador.kind == tSUMA) {
							res = vRes.valorEnt + vAux.valorEnt;
					 	}else {
							res = vRes.valorEnt - vAux.valorEnt;
					 	}
					 	if(res > 32767 || res < -32766) { 
							error_semantico(operador.beginLine, operador.beginColumn, "Desbordamiento en la operacion " + vRes.valorEnt + operador.image + vAux.valorEnt);
						}else {
							vRes.valorEnt = (int) res;
						}
					}
				}else {
					vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador aditivo \'" + operador.image + "\' no aplicable para " + vRes.tipoVariable);  	
				}
			}else if(operador.kind == tOR) {
				if(vRes.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && vAux.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
					vRes.codigo += vAux.codigo + "\tOR\n";
					vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
					if(vRes.valorBool != null && vAux.valorBool != null) {
						vRes.valorBool = vRes.valorBool || vAux.valorBool;
					}
				}else {
				  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador aditivo \'" + operador.image + "\' no aplicable para " + vRes.tipoVariable);
				}
			}
	 	})*
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tOR>|<tSUMA>|<tRESTA>
*/
Token operador_aditivo():
{
  Token t = null;
}
{
  	try {
	  	  	t = <tOR>
		| 	t = <tSUMA>
		| 	t = <tRESTA>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	} 	
}

/*
	factor() (operador_multiplicativo() factor())* 
*/
Valor termino():
{
	Valor vAux = null;
	Valor vRes = new Valor();
	Token operador = null;
}
{
  	try {
	  	vRes = factor()
	  	(operador=operador_multiplicativo() vAux = factor()
	  	{
		  	if(vAux.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && vRes.tipoVariable != Simbolo.Tipo_variable.DESCONOCIDO && vRes.tipoVariable != vAux.tipoVariable) {
				vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
				error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible entre " + vRes.tipoVariable + " y " + vAux.tipoVariable);
		 	}else if(vAux.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO || vRes.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
		 	   	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
			}else if(vAux.tamano != null || vRes.tamano != null) {
			  	vRes.tamano = null;
			  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
			  	error_semantico(operador.beginLine, operador.beginColumn, "Operador \'" + operador.image + "\' incompatible para vector");
		 	}else if(operador.kind == tMULT || operador.kind == tDIV || operador.kind == tMOD) {
				if(vRes.tipoVariable == Simbolo.Tipo_variable.ENTERO && vAux.tipoVariable == Simbolo.Tipo_variable.ENTERO) {
				  	vRes.codigo += vAux.codigo;
				  	if(operador.kind == tMULT) {
						vRes.codigo += "\tTMS\n";
				 	}else if(operador.kind == tDIV) {
						vRes.codigo += "\tDIV\n";
					}else {
						vRes.codigo += "\tMOD\n";
					}
					vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
					if((operador.kind == tDIV || operador.kind == tMOD) && vAux.valorEnt != null && vAux.valorEnt == 0) {
						error_semantico(operador.beginLine, operador.beginColumn, "Division por 0");
					}else if(operador.kind == tMULT && (vAux.valorEnt != null && vAux.valorEnt == 0 || vRes.valorEnt != null && vRes.valorEnt == 0)) {
					 	vRes.valorEnt = 0;
					}else if(vRes.valorEnt != null && vAux.valorEnt != null) {
					  	long res;
					  	if(operador.kind == tMULT) {
							res = vRes.valorEnt * vAux.valorEnt;
					 	}else if(operador.kind == tDIV) {
							res = vRes.valorEnt / vAux.valorEnt;
					 	}else{
							res = vRes.valorEnt % vAux.valorEnt;
					 	}
					 	if(res > 32767 || res < -32766) { 
							error_semantico(operador.beginLine, operador.beginColumn, "Desbordamiento en la operacion " + vRes.valorEnt + operador.image + vAux.valorEnt);
						}else {
							vRes.valorEnt = (int) res;
						}
					}
				}else {
					vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador multiplicativo \'" + operador.image + "\' no aplicable para " + vRes.tipoVariable);  	
				}
			}else if(operador.kind == tAND) {
				if(vRes.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && vAux.tipoVariable == Simbolo.Tipo_variable.BOOLEANO) {
					vRes.codigo += vAux.codigo + "\tAND\n";
					vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
					if(vRes.valorBool != null && vAux.valorBool != null) {
						vRes.valorBool = vRes.valorBool && vAux.valorBool;
					}
				}else {
				  	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO; 
					error_semantico(operador.beginLine, operador.beginColumn, "Operador multiplicativo \'" + operador.image + "\' no aplicable para " + vRes.tipoVariable);
				}
			}
	 	})* 
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return vRes;
	}
}

/*
	<tMULT>|<tDIV>|<tMOD>|<tAND>
*/
Token operador_multiplicativo():
{
  Token t = null;
}
{
  	try {
	  		t = <tMULT>
		| 	t = <tDIV>
		| 	t = <tMOD>
		| 	t = <tAND>
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	{
		return t;
	}
}

/*
	<tNOT> factor()
	|"-" factor()
	|"(" expresion() ")"
	|<tENTACAR> "(" expresion() ")"
	|<tCARAENT> "(" expresion() ")"
	|<tIDENTIFICADOR>
	|<tVALOR_ENTERO>
	|<tCONSTCHAR>
	|<tCONSTCAD>
	|<tTRUE>
	|<tFALSE>
*/
Valor factor():
{
	Valor v = null;
	Valor vRes = new Valor();
	vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
	Token t = null;
}
{
  	try {
	  	 	t = <tNOT> v = factor()
	  	 	{
	  	 	  	vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				if (v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.BOOLEANO && v.valorBool != null) {
						vRes.valorBool = !v.valorBool;
					}
					vRes.codigo = v.codigo + "\tNGB\n";
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				} 
	  		}
	 	| 	t = "-" v = factor()
	 		{
	 		  	vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.valorEnt != null) {
						vRes.valorEnt = -v.valorEnt;
					}
					vRes.codigo = v.codigo + "\tNGI\n";
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				} 
	 		}
		| 	"(" vRes = expresion() ")"
		| 	t=<tENTACAR> "(" v = expresion() ")"
			{
			  	vRes.tipoVariable = Simbolo.Tipo_variable.CHAR;
			  	vRes.codigo = v.codigo;
				if(v.tipoVariable == Simbolo.Tipo_variable.ENTERO || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.ENTERO && v.valorEnt != null) {
						if(v.valorEnt <= 255 && v.valorEnt >= 0) {
						  	int valEnt = v.valorEnt;
							vRes.valorChar = (char)valEnt;
						}
						else {
							error_semantico(t.beginLine, t.beginColumn, "Desbordamiento con el operador \'" + t.image + "\', " + v.valorEnt + " no representa un caracter ASCII");
						}
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
		| 	<tCARAENT> "(" v = expresion() ")"
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				vRes.codigo = v.codigo;
				if(v.tipoVariable == Simbolo.Tipo_variable.CHAR || v.tipoVariable == Simbolo.Tipo_variable.DESCONOCIDO) {
					if (v.tipoVariable == Simbolo.Tipo_variable.CHAR && v.valorChar != null) {
						vRes.valorEnt = (int)v.valorChar;
					}
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Operador \'" + t.image + "\' no aplicable para " + v.tipoVariable);
				}
			}
		| 	t = <tIDENTIFICADOR> ("[" v = expresion() "]")?
			{
			  	if(v!=null) {
					vRes.tamano = v.valorEnt;
			 	}
			  	Simbolo S = tablaSimbolos.buscar_simbolo(t.image);
				S.setUsado(true);
			  	vRes.tipoSimbolo = S.getTipo();
			  	vRes.claseParametro = S.getParametro();
				vRes.tipoVariable = S.getVariable();
				vRes.claseParametro = S.getParametro();
			  	if(S.getTipo() != Simbolo.Tipo_simbolo.PARAMETRO && S.getTipo() != Simbolo.Tipo_simbolo.VARIABLE) {
					error_semantico(t.beginLine, t.beginColumn, t.image + " es un simbolo de tipo " + S.getTipo());
			 	}else if(v != null && S.getTamano() == 0) {
			 		error_semantico(t.beginLine, t.beginColumn, t.image + " no es un vector");
				}else if(v != null && v.tipoVariable != Simbolo.Tipo_variable.ENTERO) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice debe ser de tipo entero");
				}else if(v != null && v.valorEnt != null && (v.valorEnt > S.getTamano()-1 || v.valorEnt < 0)) {
				  	error_semantico(t.beginLine, t.beginColumn, "El indice se encuentra fuera de rango");  	
				}else if(v == null && S.getTamano() > 0) {
				  	vRes.tamano = S.getTamano();
					vRes.codigo = "; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
									  "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
									  "\tDRF\n";
					if(S.getParametro() == Simbolo.Clase_parametro.REF) {
						vRes.codigo += "\tDRF\n";
					}
				}else {
					if(v == null || (v.valorEnt != null && S.getParametro() == Simbolo.Clase_parametro.VAL)) {
					  	if(v != null && v.valorEnt != null) {
							vRes.codigo = "; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
										  "\tSRF\t" + (nivel - S.getNivel()) + "\t" + (S.getDir()+v.valorEnt) + "\n" +
										  "\tDRF\n";
					 	}else { 
							vRes.codigo = "; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
										  "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
										  "\tDRF\n";
						}
						if(S.getParametro() == Simbolo.Clase_parametro.REF) {
							vRes.codigo += "\tDRF\n";
						}
					}else {
						necesariaErrorIndice = true;
						vRes.codigo =  "; Comprobar underflow\n" +
									    "\tSTC\t0\n" +
									    v.codigo +
									    "\tGT\n" +
									    "\tJMT\terror_out_of_bounds\n" +
									    "; Comprobar overflow\n" +
									    "; Buscando el tamano del vector " + S.getTipo() + " " + S.getNombre() + "\n" +
									    "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n" +
									    "\tDRF\n";
						if(S.getParametro() == Simbolo.Clase_parametro.REF) {
						  vRes.codigo += "\tDRF\n";
						}
						vRes.codigo +=	v.codigo +
									    "\tLTE\n" +
									    "\tJMT\terror_out_of_bounds\n" +
									    "; Accediendo a " + S.getTipo() + " " + S.getNombre() + "\n" +
									    "\tSRF\t" + (nivel - S.getNivel()) + "\t" + S.getDir() + "\n";
						if(S.getParametro() == Simbolo.Clase_parametro.REF) {
						  vRes.codigo += "\tDRF\n";
						}
						vRes.codigo +=	v.codigo +
							  			"\tPLUS\n" +
							  			"\tSTC\t1\n" +
							  			"\tPLUS\n" +
							  			"\tDRF\n";
					}
					necesariaErrorInicializada = true;
					vRes.codigo += 	"; comprobamos si " + S.getTipo() + " " + S.getNombre() + " esta inicializada\n" +
									"\tDUP\n" +
									"\tSTC\t32768\n" +
									"\tEQ\n" +
									"\tJMT\terror_inicializada\n";
				} 
			}
		| 	t = <tVALOR_ENTERO>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.ENTERO;
				if(t.image.length() < 10 && Long.parseLong(t.image) < 32767 && Long.parseLong(t.image) > -32766) {
					vRes.valorEnt = Integer.parseInt(t.image);
					vRes.codigo = "\tSTC\t" + vRes.valorEnt + "\n";
				}else {
					error_semantico(t.beginLine, t.beginColumn, "Desboradmiento en la constante entera " + t.image);
				}
			}
		| 	t = <tCONSTCHAR>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.CHAR;
				vRes.valorChar = t.image.charAt(1);
				vRes.codigo = "\tSTC\t" + (int)vRes.valorChar + "\n";
			}
		| 	t = <tCONSTCAD>
			{ 
			    vRes.codigo = "; cadena \'" + t.image + "\'\n";
			    char[] cad = t.image.toCharArray();
			    int j = 0;
			    for (char i : cad) {
			    	if (j != 0 && j != t.image.length() - 1) {
			        	vRes.codigo += "\tSTC\t" + Integer.valueOf(i) + "\n" + "\tWRT\t0\n";
			       	}
			    	j++;
			    }
				vRes.tipoVariable = Simbolo.Tipo_variable.CADENA;
			}
		| 	<tTRUE>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				vRes.valorBool = true;
				vRes.codigo = "\tSTC\t1\n";
			}
		| 	<tFALSE>
			{
				vRes.tipoVariable = Simbolo.Tipo_variable.BOOLEANO;
				vRes.valorBool = false;
				vRes.codigo = "\tSTC\t0\n";
			}
	}
	catch (ParseException e)
	{
		errorSintactico(e);
	}
	catch (SimboloNoEncontradoException e)
	{
	  try { 
	  	tablaSimbolos.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, dir,0,t.beginLine, t.beginColumn);
	  }
	  catch(SimboloYaDeclaradoException e1) {
	  	error_semantico(t.beginLine, t.beginColumn, "\'" + t.image + "\' ya declarado");  
	  }
	  vRes.tipoVariable = Simbolo.Tipo_variable.DESCONOCIDO;
	  error_semantico(t.beginLine, t.beginColumn, "\'" + t.image + "\' no declarado");	  
	}
	{
		return vRes;
	}
}