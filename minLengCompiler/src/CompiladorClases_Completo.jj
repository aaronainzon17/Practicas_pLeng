/**
 * Especificacion JavaCC para la Practica 2 (Procesadores de Lenguajes)
 * Pablo Garcia Garcia - 781020@unizar.es
 * Aaron Ibañez Espes - 779088@unizar.es
 * Ultima modificacion:
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(CompiladorClases)

public class CompiladorClases
{
  public static void main(String args []) throws ParseException
  {
    CompiladorClases parser = new CompiladorClases(System.in);
    System.out.println("Leyendo de la entrada estándar...");
    try { 
    	CompiladorClases.programa();
    	System.out.println("Analizado correctamente");
    }
    catch (TokenMgrError e) {
		//Error léxico
		System.out.println("Error lexico");
	}
	catch (ParseException e) {
		//Error sintáctico
		System.out.println("Error sintactico");
  	}
  	catch (Error e) { 
        System.out.println("Se ha producido un error inesperado");
        System.out.println(e.getMessage());
	}
  }
}

PARSER_END(CompiladorClases)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"%" (~["\n"])* ("\n")>
| <"%%" (~["%"])* "%%"> 
}

TOKEN : /* PALABRAS RESERVADAS */
{
	<tPROGRAMA : "programa">
	{
	  System.out.println("programa");
	}
|	<tVAR : "var">
	{
	  System.out.println("var");
	}
|	<tPRINCIPIO : "principio">
	{
	  System.out.println("principio");
	}
|	<tFIN : "fin">
	{
	  System.out.println("fin");
	}
|	<tSI : "si">
	{
	  System.out.println("si");
	}
|	<tENT : "ent">
	{
	  System.out.println("ent");
	}
|	<tSI_NO : "si_no">
	{
	  System.out.println("si_no");
	}
|	<tFSI : "fsi">
	{
	  System.out.println("fsi");
	}
|	<tMQ : "mq"> 
	{
	  System.out.println("mq");
	}
|	<tFMQ : "fmq">
	{
	  System.out.println("fmq");
	}
|	<tVAL : "val">
	{
	  System.out.println("val");
	}
|	<tREF : "ref">
	{
	  System.out.println("ref");
	}
|	<tACCION : "accion">
	{
	  System.out.println("accion");
	}
  
}

TOKEN: /* OPERADORES DE FLUJO */
{
	<tFIN_SENTENCIA : ";" >
 	{
    	System.out.println("FIN_SENTENCIA");
 	}
| 	<tSEPARADOR : "," >
 	{
    	System.out.println("SEPARADOR");
 	}
}

TOKEN : /* OPERADORES ARITMETICOS */
{
	<tSUMA : "+" >
 	{
    	System.out.println("SUMA");
 	}
| 	<tRESTA : "-" >
 	{
    	System.out.println("RESTA");
 	}
 | 	<tDIV : "/" | "DIV" >
 	{
    	System.out.println("DIVISION");
 	}
 | 	<tMULT : "*" >
 	{
    	System.out.println("MULT");
 	}
}

TOKEN : /* TIPOS DE DATOS */
{
	<tENTERO : "entero">
	{
	  System.out.println("entero");
	}
|	<tBOOLEANO : "booleano">
	{
	  System.out.println("booleano");
	}
|	<tCARACTER : "caracter">
	{
	  System.out.println("caracter");
	}
}

TOKEN : /* OPERADORES BOOLEANOS */
{
	<tAND : "and">
	{
	  System.out.println("and");
	}
|	<tOR : "or">
	{
	  System.out.println("or");
	}
|	<tNOT : "not">
	{
	  System.out.println("not");
	}
|	<tMAYOR : ">">
	{
	  System.out.println(" >");
	}
|	<tMENOR : "<">
	{
	  System.out.println("<");
	}
|	<tIGUAL : "=">
	{
	  System.out.println("=");
	}
|	<tMAI : ">=">
	{
	  System.out.println(">=");
	}
|	<tMEI : "<=">
	{
	  System.out.println("<=");
	}
|	<tNI : "<>">
	{
	  System.out.println("<>");
	}
|	<tOPAS : ":=">
	{
	  System.out.println(":=");
	}
|	<tMOD : "mod">
	{
	  System.out.println("mod");
	}
}

TOKEN: /* OPERADORES ENTRADA/SALIDA */
{
	<tESCRIBIR : "escribir">
	{
	  System.out.println("escribir");
	}
|	<tLEER : "leer">
	{
	  System.out.println("leer");
	}
}

TOKEN : /* OPERADORES CARACTERES */
{
	<tENTACAR : "entacar">
	{
	  System.out.println("entacar");
	}
|	<tCARAENT : "caraent">
	{
	  System.out.println("caraent");
	}
}

TOKEN : /* VALORES */
{
  	<#DIGITO : ["0"-"9"]>
| 	<#LETRA : ["a"-"z"]>
| 	<#SIGNO : [":", ",","?","¿","=","[","]","{","}","(",")","<",">", "'","\"","=",",",".",",",";"," ", "/"] >
        
| 	< tVALOR_ENTERO : (< DIGITO >)+ >
  	{
    	System.out.println("VALOR_ENTERO (Valor: " + matchedToken + ")"); 
  	}
|	<tTRUE : "true">
	{
	  System.out.println("true");
	}
|	<tFALSE : "false">
	{
	  System.out.println("false");
	} 
| 	<tIDENTIFICADOR : ((< LETRA > | ("_")+(< DIGITO > | < LETRA >))(< DIGITO >)*)+ >
  	{
    	System.out.println("IDENTIFICADOR (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCHAR : "\"" < LETRA > "\"" >
  	{
    	System.out.println("CARACTER (Valor: " + matchedToken + ")");
  	}
| 	<tCONSTCAD : "\"" (< DIGITO > | < LETRA > | < SIGNO >)+  "\"" >
  	{
    	System.out.println("CADENA (Valor: " + matchedToken + ")");
  	}
}


TOKEN : /* AGRUPACIONES */
{
  <tPAR_IZQ : "(">
  {
    System.out.println("PAR_IZQ");
  }
| <tPAR_DER : ")">
  {
    System.out.println("PAR_DCHA");
  }
} 

// ANALIZADOR SINTACTICO

void programa():
{
  Token t = null;
}
{
 	<tPROGRAMA> t = <tIDENTIFICADOR>
	{
	  System.out.println("Identificador del programa: " + t.image);
	}
 	";" declaracion_variables() declaracion_acciones() bloque_sentencias()
}

void declaracion_variables():
{
}
{
	(declaracion() ";")*
}

void declaracion():
{
}
{
	tipo_variables() identificadores()
}

void tipo_variables():
{
}
{
	<tENTERO> | <tCARACTER> | <tBOOLEANO>
}

void identificadores():
{
}
{
	<tIDENTIFICADOR> ( "," <tIDENTIFICADOR> )*
}

void declaracion_acciones():
{
}
{
	( declaracion_accion() )*
}

void declaracion_accion():
{
}
{
	cabecera_accion() ";" declaracion_variables() declaracion_acciones() bloque_sentencias()
}

void cabecera_accion():
{
}
{
	<tACCION> <tIDENTIFICADOR> parametros_formales()
}

void parametros_formales():
{
}
{
	("(" parametros() (";" parametros())* ")")? 
}

void lista_parametros():
{
}
{ 
	<tIDENTIFICADOR> ("," <tIDENTIFICADOR>)* 
}

void parametros():
{
}
{
	clase_parametros() tipo_variables() lista_parametros()
}

void clase_parametros():
{
}
{
	<tVAL> | <tREF>
}

void bloque_sentencias():
{
}
{
	<tPRINCIPIO> lista_sentencias() <tFIN>  
}

void lista_sentencias():
{
}
{
	(sentencia())+
	
}

void sentencia():
{
}
{
	leer() ";"
| 	escribir() ";"
| 	<tIDENTIFICADOR> (asignacion() | invocacion_accion())
| 	seleccion()
| 	mientras_que()
}

void leer():
{
}
{
	<tLEER> "(" lista_asignables() ")"
}

void lista_asignables():
{
}
{
 	lista_parametros()
}

void escribir():
{
}
{
	<tESCRIBIR> "(" lista_escribibles() ")"
}

void lista_escribibles():
{
}
{
	factor() (","(factor()))*
}

void asignacion():
{
}
{
  	<tOPAS> expresion() ";"
}

void invocacion_accion():
{
}
{
	argumentos() ";" 
}

void mientras_que():
{
}
{
	<tMQ> expresion() lista_sentencias() <tFMQ>
}

void seleccion():
{
}
{
	< tSI > expresion() < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())? < tFSI >
}

void argumentos():
{
}
{
	( "(" lista_expresiones() ")")
}

void lista_expresiones():
{
}
{
	(expresion())+
	
}

void expresion():
{
}
{
	expresion_simple() (operador_relacional() expresion_simple())?
}

void operador_relacional():
{
}
{
	<tMAYOR>
|	<tMENOR>
|	<tIGUAL> 
|	<tMAI>
|	<tMEI>
|	<tNI>
}

void expresion_simple():
{
}
{
  	termino() (operador_aditivo() termino())*
}

void signo():
{
}
{
 	<tSUMA>
| 	<tRESTA> 
}

void operador_aditivo():
{
}
{
  	<tOR>
| 	<tSUMA>
| 	<tRESTA> 	
}

void termino():
{
}
{
	factor() (operador_multiplicativo() factor())*
}

void operador_multiplicativo():
{
}
{
	<tMULT>
| 	<tDIV>
| 	<tMOD>
| 	<tAND>
}

void factor():
{
}
{
 	<tNOT> factor()
| 	"(" expresion() ")"
| 	<tENTACAR> "(" expresion() ")"
| 	<tCARAENT> "(" expresion() ")"
| 	<tIDENTIFICADOR>
| 	<tVALOR_ENTERO>
| 	<tCONSTCHAR>
| 	<tCONSTCAD>
| 	<tTRUE>
| 	<tFALSE>
}